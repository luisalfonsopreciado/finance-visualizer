{"version":3,"sources":["components/Payoff.js","store/actions/portfolio.js","components/StockData.js","utility/options.js","utility/constants.js","utility/Option.js","utility/DS/ColorPicker.js","hooks/useUpdateEffect.js","components/Panel.js","context/liveData.js","components/Navigation/DropDownBtn.js","store/actions/strategy-info.js","components/Navigation/Navigation.js","components/Search.js","components/Error/Error.js","components/SecurityInfo.js","components/Slider.js","components/StockAnyChart.js","components/PayoffHighChart.js","components/HighStock.js","utility/greeks.js","components/GreekTable.js","components/InfoMessage.js","App.js","store/reducers/portfolio.js","store/reducers/strategy-info.js","index.js"],"names":["Payoff","data","d3","remove","myData","Ydomain","nv","newChart","lineChart","margin","left","useInteractiveGuideline","showLegend","showYAxis","showXAxis","xAxis","axisLabel","tickFormat","yAxis","forceY","datum","call","windowResize","update","drawChart","className","id","updateContract","contractName","property","value","type","updateStockData","setData","StockData","liveMode","stockData","useSelector","state","portfolio","dispatch","useDispatch","Card","variant","CardHeader","title","subheader","moment","format","CardContent","InputLabel","htmlFor","TextField","label","placeholder","onChange","e","actions","target","currentPrice","volatility","interest","evaluatePayoffFunc","option","price","cost","amount","cts","direction","Math","max","parseInt","strike","min","BlackScholes","optionType","S","X","T","r","v","d1","log","sqrt","d2","CND","exp","x","k","PI","BUY","SELL","CALL","PUT","CASH","stockDataInitialState","ticker","updatePortfolioPrices","key","contract","getPrice","debitCredit","timeDiff","dateDiffInYears","date","round","num","n","res","toFixed","UNIXToDateString","UNIX_timestamp","a","Date","createDateNYearsFromNow","d","year","getFullYear","month","getMonth","day","getDate","console","c","futureDate","currentDate","diff","initialPortfolioId","initialPortfolio","getRelativeStrike","impliedVol","N","optionData","targetDate","Infinity","actualDate","expirationDate","dateDiff","abs","finalStrike","options","minDiffStrike","toUpperCase","getLongCondor","firstStrike","firstDate","firstPrice","secondStrike","secondDate","secondPrice","thirdStrike","thirdDate","thirdPrice","fourthStrike","fourthDate","fourthPrice","firstId","secondId","thirdId","fourthId","getShortCondor","getBullCallSpread","getBearPutSpread","getLongStraddle","getShortStraddle","getLongButterfly","getShortButterfly","strategyInfo","Option","this","toISOString","replace","ColorPicker","colors","index","result","length","useUpdateEffect","effect","dependencies","isInitialMount","useRef","useEffect","current","useStyles","makeStyles","theme","formControl","spacing","minWidth","selectEmpty","marginTop","Contract","props","classes","useState","expirationDates","setExpirationDates","selectedDate","setSelectedDate","strikePrices","setStrikePrices","map","item","apiContract","find","ask","bid","strikesAtDate","cashContract","util","TableRow","TableCell","FormControl","Select","labelId","MenuItem","InputLabelProps","shrink","isNaN","textField","style","verticalAlign","Typography","Button","color","button","startIcon","onClick","contractId","Panel","premium","debitcredit","calculateTotal","TableContainer","Table","aria-label","TableHead","newContract","TableBody","push","renderContracts","liveDataContext","React","createContext","setLiveMode","DropDownBtn","open","setOpen","anchorRef","handleClose","event","newPortfolio","ct","contains","info","handleListKeyDown","preventDefault","prevOpen","focus","ref","aria-controls","undefined","aria-haspopup","Popper","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","root","flexGrow","menuButton","marginRight","navbar","marginBottom","position","zIndex","MenuAppBar","setPortfolio","changeTheme","useContext","AppBar","Toolbar","FormGroup","FormControlLabel","control","Switch","checked","prev","IconButton","href","height","widht","Search","searchFunc","inputValue","setInputValue","Grid","md","Autocomplete","symbols","getOptionLabel","displaySymbol","description","filterOptions","query","filter","o","includes","renderInput","params","noOptionsText","Error","reason","removeFunc","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","children","action","Fragment","size","fontSize","SecurityInfo","Body","width","input","slider","InputSlider","setValue","gutterBottom","container","alignItems","xs","Slider","newValue","aria-labelledby","StockAnyChart","newData","forEach","pnt","stockDataTable","anychart","table","addData","chart","plot","area","mapAs","name","scroller","selectRange","instance","Highcharts","backgroundColor","fontFamily","plotBorderColor","textTransform","subtitle","gridLineColor","labels","lineColor","minorGridLineColor","tickColor","tickWidth","tooltip","plotOptions","series","dataLabels","marker","boxplot","fillColor","candlestick","errorbar","legend","itemStyle","itemHoverStyle","itemHiddenStyle","credits","drilldown","activeAxisLabelStyle","activeDataLabelStyle","navigation","buttonOptions","symbolStroke","fill","rangeSelector","buttonTheme","stroke","states","hover","select","inputBoxBorderColor","inputStyle","labelStyle","navigator","handles","borderColor","outlineColor","maskFill","scrollbar","barBackgroundColor","barBorderColor","buttonArrowColor","buttonBackgroundColor","buttonBorderColor","rifleColor","trackBackgroundColor","trackBorderColor","PayoffHighChart","setOptions","highcharts","App","mockData","mockOptions","selected","text","align","lineWidth","resize","enabled","top","offset","split","dataGrouping","units","columnData","i","HighStock","constructorType","_stdNormDensity","pow","E","getDelta","s","t","_callDelta","delta","_putDelta","w","bs","getW","isFinite","stdNormCDF","getRho","scale","_callRho","_putRho","getTheta","_callTheta","_putTheta","SimpleTable","keys","Object","portfolioStats","IV","gamma","rho","theta","vega","component","contractDelta","greeks","contractGamma","contractRho","contractTheta","contractVega","scope","close","padding","ConsecutiveSnackbars","messageInfo","setMessageInfo","onExited","payoff","btn","errors","setErrors","stockErrors","setStockErrors","setOptionData","minX","setMinX","maxX","setMaxX","stockChartData","setStockChartData","viewHighChart","setViewHighChart","viewHighStock","setViewHighStock","view","setView","hcData","setHcData","daysToExpiration","setDaysToExpiration","location","useLocation","setErrs","useCallback","setStockErrs","saveStrategy","axios","post","process","updateData","strikes","maxStrike","minStrike","values","theoretical","average","change","floor","sort","b","getColor","disabled","minProfit","maxProfit","profitSum","theoreticalPL","profitAtStrike","blackScholesValue","y","strategyData","strategyTheoretical","seriesInfo","visible","point","get","pathname","fetchData","fetchOptionData","lastTradePrice","code","fetchStockData","unix","h","l","updateDaysToExpiration","days","newDate","dayObject","valueOf","setDate","Provider","Container","visualize","val","avatar","onBlur","initialState","resetPortfolio","removeContract","addContract","updatePrices","newStockData","updateAllContracts","rootReducer","combineReducers","store","createStore","Index","darkState","setDarkState","palletType","createMuiTheme","palette","StrictMode","ThemeProvider","ReactDOM","render","document","getElementById"],"mappings":"6jt6BAqDeA,EAjDA,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEhBC,YAAa,aAAaC,SAoC1B,OADAF,GAjCkB,SAAC,GAA+B,IAAvBG,EAAsB,EAA5BH,KAAcI,EAAc,EAAdA,QAEjCC,YAAY,WACV,IAAMC,EAAWD,SACdE,YACAC,OAAO,CAAEC,KAAM,MACfC,yBAAwB,GAExBC,YAAW,GACXC,WAAU,GACVC,WAAU,GAmBb,OAjBAP,EAASQ,MACNC,UAAU,aACVC,WAAWf,SAAU,SAExBK,EAASW,MACNF,UAAU,cACVC,WAAWf,SAAU,SAExBK,EAASY,OAAOd,GAEhBH,SAAU,cACPkB,MAAMhB,GACNiB,KAAKd,GAGRD,QAASgB,aAAaf,EAASgB,QAExBhB,KAIHiB,CAAUvB,GAEhB,oCACE,yBAAKwB,UAAU,cACb,yBAAKC,GAAG,SACN,yBAAKA,GAAG,kB,QC9BLC,EAAiB,SAACC,EAAcC,EAAUC,GACrD,MAAO,CACLC,KAb2B,kBAc3BF,WACAC,QACAF,iBA8CSI,EAAkB,SAACH,EAAUC,GACxC,MAAO,CACLC,KAJ6B,oBAK7BF,WACAC,UAaSG,EAAU,SAAChC,GACtB,MAAO,CACL8B,KA/EoB,WAgFpB9B,S,8DCnBWiC,EAxDG,SAAC,GAAiB,EAAfC,SAAgB,IAC3BC,EAAcC,aAAY,SAACC,GAAD,OAAWA,EAAMC,aAA3CH,UACFI,EAAWC,cAEjB,OACE,oCACE,kBAACC,EAAA,EAAD,CAAMC,QAAQ,YACZ,kBAACC,EAAA,EAAD,CACEC,MAAM,aACNC,UAAWC,MAASC,OAAO,gBAE7B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,iBAApB,2BAGA,kBAACC,EAAA,EAAD,CACE1B,GAAG,gBACH2B,MAAM,gBACNV,QAAQ,SACRZ,KAAK,SACLuB,YAAY,gBACZC,SAAU,SAACC,GACThB,EAASiB,EAAwB,eAAgBD,EAAEE,OAAO5B,SAE5DA,MAAOM,EAAUuB,eAEnB,kBAACT,EAAA,EAAD,CAAYC,QAAQ,iBAApB,kBACA,kBAACC,EAAA,EAAD,CACE1B,GAAG,iBACH2B,MAAM,aACNV,QAAQ,SACRZ,KAAK,SACLuB,YAAY,aACZC,SAAU,SAACC,GAAD,OACRhB,EAASiB,EAAwB,aAAcD,EAAEE,OAAO5B,SAE1DA,MAAOM,EAAUwB,aAEnB,kBAACV,EAAA,EAAD,CAAYC,QAAQ,iBAApB,oBACA,kBAACC,EAAA,EAAD,CACE1B,GAAG,iBACH2B,MAAM,WACNV,QAAQ,SACRZ,KAAK,SACLuB,YAAY,WACZC,SAAU,SAACC,GAAD,OACRhB,EAASiB,EAAwB,WAAYD,EAAEE,OAAO5B,SAExDA,MAAOM,EAAUyB,e,QChDhBC,EAAqB,SAACC,EAAQC,EAAO5B,GAChD,IAAM6B,EAAOF,EAAOC,MAAQD,EAAOG,OACnC,OAAIH,EAAOhC,OAASoC,EAEdJ,EAAOK,YAAcD,EAGrBE,KAAKC,IAAIN,EAAQO,SAASR,EAAOS,QAAS,GAAKT,EAAOG,OAASD,EAI5DI,KAAKI,IAAI,EAAGV,EAAOS,OAASR,GAASD,EAAOG,OAASD,EACnDF,EAAOhC,OAASoC,EAErBJ,EAAOK,YAAcD,EAGrBE,KAAKC,IAAIC,SAASR,EAAOS,QAAUR,EAAO,GAAKD,EAAOG,OAASD,EAI5DI,KAAKI,IAAI,EAAGT,EAAQD,EAAOS,QAAUT,EAAOG,OAASD,EACnDF,EAAOhC,OAASoC,EAErBJ,EAAOK,YAAcD,GAEfH,EAAQ5B,EAAUuB,cAAgBI,EAAOG,QAG3C9B,EAAUuB,aAAeK,GAASD,EAAOG,YAP5C,GAuBF,SAASQ,EAAaC,EAAYC,EAAGC,EAAGC,EAAGC,EAAGC,GAEnDA,GAAQ,IACRD,GAAQ,IACR,IAAIE,GAAMZ,KAAKa,IAAIN,EAAIC,IAAME,EAAKC,EAAIA,EAAK,GAAKF,IAAME,EAAIX,KAAKc,KAAKL,IAChEM,EAAKH,EAAKD,EAAIX,KAAKc,KAAKL,GAC5B,OACSX,EADLQ,IAAeR,EACAS,EAAIS,EAAIJ,GAAMJ,EAAIR,KAAKiB,KAAKP,EAAID,GAAKO,EAAID,GAEzCP,EAAIR,KAAKiB,KAAKP,EAAID,GAAKO,GAAKD,GAAMR,EAAIS,GAAKJ,IAKhE,SAASI,EAAIE,GACX,GAAIA,EAAI,EACN,OAAO,EAAIF,GAAKE,GAEhB,IAAIC,EAAI,GAAK,EAAI,SAAYD,GAC7B,OACE,EACClB,KAAKiB,KAAMC,EAAIA,EAAK,GAAKlB,KAAKc,KAAK,EAAId,KAAKoB,IAC3CD,GACC,UACCA,GAEIA,GAAK,YAAcA,GAAwB,YAAJA,EAAd,cADzB,aC/EP,IAAME,EAAM,MACNC,EAAO,OACPC,EAAO,OACPC,EAAM,MACNC,EAAO,OAOPC,EAAwB,CACnCC,OAAQ,cACRrC,aAAc,IACdC,WAAY,GACZC,SAAU,GAGCoC,EAAwB,SAAC1D,EAAWH,GAC/C,IAAK,IAAI8D,KAAO3D,EAAW,CACzB,IAAM4D,EAAW5D,EAAU2D,GACvBC,EAASpE,OAAS+D,EACpBK,EAASnC,MAAQ5B,EAAUuB,aAE3BwC,EAASnC,MAAQoC,EAASD,EAAU/D,GAEtC+D,EAASE,YACPF,EAAS/B,YAAcuB,EAAOQ,EAASnC,OAASmC,EAASnC,QAIzDoC,EAAW,SAACD,EAAU/D,GAC1B,IAAMkE,EAAWC,EAAgBJ,EAASK,MAC1C,OAAOC,EACL/B,EACEyB,EAASpE,KACTK,EAAUuB,aACVwC,EAAS3B,OACT8B,EACAlE,EAAUyB,SACVzB,EAAUwB,cAcH6C,EAAQ,SAACC,GAAgB,IAAXC,EAAU,uDAAN,EAEV,kBAARD,IACTA,GAAOA,GAET,IAAIE,EAAMF,EAAIG,QAAQF,GACtB,OAAQC,GAUGE,EAAmB,SAACC,GAC/B,IAAMC,EAAI,IAAIC,KAAsB,IAAjBF,GACnB,OAAOhE,IAAOiE,GAAGhE,OAAO,eA0BpBkE,EAA0B,SAACP,GAC/B,IAAIQ,EAAI,IAAIF,KACRG,EAAOD,EAAEE,cACTC,EAAQH,EAAEI,WACVC,EAAML,EAAEM,UACZC,QAAQxC,IAAIkC,GACZ,IAAIO,EAAI,IAAIV,KAAKG,EAAOT,EAAGW,EAAOE,GAClC,OAAOzE,IAAO4E,GAAG3E,OAAO,eAWbuD,EAAkB,SAACqB,GAA0C,IAA9BC,EAA6B,uDAAf,IAAIZ,KAC5D,OAAQlE,IAAO8E,GAAaC,KAAKF,EAAY,SAAS,IAM3CpB,EAAOU,EAAwB,GAEtCa,EAAqB,CACzB7D,OAAQ,EACRtC,aAAc,qBACd4E,OACApC,UAAWsB,EACXlB,OAAQ,IACRzC,KAAM6D,GAGF5B,EAAQoC,EAAS2B,EAAoBhC,GAE3CgC,EAAmB/D,MAAQA,EAE3B+D,EAAmB1B,YAAcrC,EAG1B,IAAMgE,EAAmB,CAC9BD,sBAMWE,EAAoB,SAC/BtE,EACAuE,EACAC,EACAC,EACArG,EACA8B,GAEA,IAAIW,EACFiC,EAAM9C,GAAgB8C,EAAM9C,GAAgB8C,EAAMyB,EAAa,KAAOC,EAExE,IAAKC,EAAY,CACf,IACMpE,EAAQU,EACZ3C,EACA4B,EACAa,EAJe+B,EAAgBC,GAM/B3C,EACAqE,GAEF,MAAO,CAAE1D,SAAQgC,OAAMxC,SAYzB,IAAMqE,EAAanB,EAAwB,GACvCzC,EAAM6D,IACNC,EAAa,KAEjB,IAAK,IAAIrC,KAAOkC,EAAWnI,KAAM,CAAC,IACxBuI,EAAmBJ,EAAWnI,KAAKiG,GAAnCsC,eAEFC,EAAWpE,KAAKqE,IAAInC,EAAgBiC,EAAgBH,IACtDI,EAAWhE,IACbA,EAAMgE,EACNF,EAAaC,GAIjB,IAAIG,EAAcnE,EAGlB,IAAK,IAAI0B,KAAOkC,EAAWnI,KAAM,CAAC,IAAD,EACKmI,EAAWnI,KAAKiG,GAA5C0C,EADuB,EACvBA,QACR,GAF+B,EACdJ,iBACMD,EAAY,CACjC,IADiC,EAC7BM,EAAgBP,IADa,cAEdM,EAAQ7G,EAAK+G,gBAFC,IAEjC,2BAAgD,CAAC,IAAxC/E,EAAuC,QAC1CM,KAAKqE,IAAI3E,EAAOS,OAASA,GAAUqE,IACrCA,EAAgBxE,KAAKqE,IAAI3E,EAAOS,OAASA,GACzCmE,EAAc5E,EAAOS,SALQ,gCAWrC,IAAMiE,EAAWlC,EAAgBgC,GAYjC,MAAO,CAAE/D,OAAQmE,EAAanC,KAAM+B,EAAYvE,MAXlCyC,EACZ/B,EACE3C,EACA4B,EACAgF,EACAF,EACA5E,EACAqE,MASOa,EAAgB,SAC3BpF,EACAuE,EACAE,EACAvE,GACI,IAAD,EAKCoE,EACFtE,EACAuE,GACC,EACDE,EACAxC,EACA/B,GATQmF,EAFP,EAEDxE,OACMyE,EAHL,EAGDzC,KACO0C,EAJN,EAIDlF,MAJC,EAkBCiE,EACFtE,EACAuE,GACC,GACDE,EACAxC,EACA/B,GATQsF,EAfP,EAeD3E,OACM4E,EAhBL,EAgBD5C,KACO6C,EAjBN,EAiBDrF,MAjBC,EA+BCiE,EACFtE,EACAuE,EACA,GACAE,EACAxC,EACA/B,GATQyF,EA5BP,EA4BD9E,OACM+E,EA7BL,EA6BD/C,KACOgD,EA9BN,EA8BDxF,MA9BC,EA4CCiE,EACFtE,EACAuE,EACA,EACAE,EACAxC,EACA/B,GATQ4F,EAzCP,EAyCDjF,OACMkF,EA1CL,EA0CDlD,KACOmD,EA3CN,EA2CD3F,MAUF,MAAO,CACL4F,QAAS,CACP1F,OAAQ,EACRtC,aAAc,UACd4E,KAAMyC,EACN7E,UAAWsB,EACX1B,MAAOkF,EACP1E,OAAQwE,EACRjH,KAAM6D,GAERiE,SAAU,CACR3F,OAAQ,EACRtC,aAAc,WACd4E,KAAM4C,EACNhF,UAAWuB,EACX3B,MAAOqF,EACP7E,OAAQ2E,EACRpH,KAAM6D,GAERkE,QAAS,CACP5F,OAAQ,EACRtC,aAAc,UACd4E,KAAM+C,EACNnF,UAAWuB,EACX3B,MAAOwF,EACPhF,OAAQ8E,EACRvH,KAAM6D,GAERmE,SAAU,CACR7F,OAAQ,EACRtC,aAAc,WACd4E,KAAMkD,EACNtF,UAAWsB,EACX1B,MAAO2F,EACPnF,OAAQiF,EACR1H,KAAM6D,KAOCoE,EAAiB,SAC5BrG,EACAuE,EACAE,EACAvE,GACI,IAAD,EAKCoE,EACFtE,EACAuE,EACA,GACAE,EACAxC,EACA/B,GATQmF,EAFP,EAEDxE,OACMyE,EAHL,EAGDzC,KACO0C,EAJN,EAIDlF,MAJC,EAkBCiE,EACFtE,EACAuE,EACA,EACAE,EACAxC,EACA/B,GATQsF,EAfP,EAeD3E,OACM4E,EAhBL,EAgBD5C,KACO6C,EAjBN,EAiBDrF,MAjBC,EA+BCiE,EACFtE,EACAuE,GACC,GACDE,EACAvC,EACAhC,GATQyF,EA5BP,EA4BD9E,OACM+E,EA7BL,EA6BD/C,KACOgD,EA9BN,EA8BDxF,MA9BC,EA4CCiE,EACFtE,EACAuE,GACC,EACDE,EACAvC,EACAhC,GATQ4F,EAzCP,EAyCDjF,OACMkF,EA1CL,EA0CDlD,KACOmD,EA3CN,EA2CD3F,MAUF,MAAO,CACL4F,QAAS,CACP1F,OAAQ,EACRtC,aAAc,UACd4E,KAAMyC,EACN7E,UAAWsB,EACX1B,MAAOkF,EACP1E,OAAQwE,EACRjH,KAAM6D,GAERiE,SAAU,CACR3F,OAAQ,EACRtC,aAAc,WACd4E,KAAM4C,EACNhF,UAAWuB,EACX3B,MAAOqF,EACP7E,OAAQ2E,EACRpH,KAAM6D,GAERkE,QAAS,CACP5F,OAAQ,EACRtC,aAAc,UACd4E,KAAM+C,EACNnF,UAAWsB,EACX1B,MAAOwF,EACPhF,OAAQ8E,EACRvH,KAAM8D,GAERkE,SAAU,CACR7F,OAAQ,EACRtC,aAAc,WACd4E,KAAMkD,EACNtF,UAAWuB,EACX3B,MAAO2F,EACPnF,OAAQiF,EACR1H,KAAM8D,KAOCoE,EAAoB,SAC/BtG,EACAuE,EACAE,EACAvE,GACI,IAAD,EAKCoE,EACFtE,EACAuE,EACA,EACAE,EACAxC,EACA/B,GATQmF,EAFP,EAEDxE,OACMyE,EAHL,EAGDzC,KACO0C,EAJN,EAIDlF,MAJC,EAkBCiE,EACFtE,EACAuE,EACA,GACAE,EACAxC,EACA/B,GATQsF,EAfP,EAeD3E,OACM4E,EAhBL,EAgBD5C,KACO6C,EAjBN,EAiBDrF,MAUF,MAAO,CACL4F,QAAS,CACP1F,OAAQ,EACRtC,aAAc,UACd4E,KAAMyC,EACN7E,UAAWsB,EACX1B,MAAOkF,EACP1E,OAAQwE,EACRjH,KAAM6D,GAERiE,SAAU,CACR3F,OAAQ,EACRtC,aAAc,WACd4E,KAAM4C,EACNhF,UAAWuB,EACX3B,MAAOqF,EACP7E,OAAQ2E,EACRpH,KAAM6D,KAOCsE,EAAmB,SAC9BvG,EACAuE,EACAE,EACAvE,GACI,IAAD,EAKCoE,EAAkBtE,EAAcuE,EAAY,EAAGE,EAAYvC,EAAKhC,GAH1DmF,EAFP,EAEDxE,OACMyE,EAHL,EAGDzC,KACO0C,EAJN,EAIDlF,MAJC,EAWCiE,EACFtE,EACAuE,GACC,GACDE,EACAvC,EACAhC,GATQsF,EARP,EAQD3E,OACM4E,EATL,EASD5C,KACO6C,EAVN,EAUDrF,MAUF,MAAO,CACL4F,QAAS,CACP1F,OAAQ,EACRtC,aAAc,UACd4E,KAAMyC,EACN7E,UAAWsB,EACX1B,MAAOkF,EACP1E,OAAQwE,EACRjH,KAAM8D,GAERgE,SAAU,CACR3F,OAAQ,EACRtC,aAAc,WACd4E,KAAM4C,EACNhF,UAAWuB,EACX3B,MAAOqF,EACP7E,OAAQ2E,EACRpH,KAAM8D,KAOCsE,EAAkB,SAC7BxG,EACAuE,EACAE,EACAvE,GACI,IAAD,EAKCoE,EACFtE,EACAuE,EACA,EACAE,EACAxC,EACA/B,GATQmF,EAFP,EAEDxE,OACMyE,EAHL,EAGDzC,KACO0C,EAJN,EAIDlF,MAJC,EAkBCiE,EAAkBtE,EAAcuE,EAAY,EAAGE,EAAYvC,EAAKhC,GAH1DsF,EAfP,EAeD3E,OACM4E,EAhBL,EAgBD5C,KACO6C,EAjBN,EAiBDrF,MAGF,MAAO,CACL4F,QAAS,CACP1F,OAAQ,EACRtC,aAAc,UACd4E,KAAMyC,EACN7E,UAAWsB,EACX1B,MAAOkF,EACP1E,OAAQwE,EACRjH,KAAM6D,GAERiE,SAAU,CACR3F,OAAQ,EACRtC,aAAc,WACd4E,KAAM4C,EACNhF,UAAWsB,EACX1B,MAAOqF,EACP7E,OAAQ2E,EACRpH,KAAM8D,KAOCuE,EAAmB,SAC9BzG,EACAuE,EACAE,EACAvE,GACI,IAAD,EAKCoE,EACFtE,EACAuE,EACA,EACAE,EACAxC,EACA/B,GATQmF,EAFP,EAEDxE,OACMyE,EAHL,EAGDzC,KACO0C,EAJN,EAIDlF,MAJC,EAkBCiE,EAAkBtE,EAAcuE,EAAY,EAAGE,EAAYvC,EAAKhC,GAH1DsF,EAfP,EAeD3E,OACM4E,EAhBL,EAgBD5C,KACO6C,EAjBN,EAiBDrF,MAGF,MAAO,CACL4F,QAAS,CACP1F,OAAQ,EACRtC,aAAc,UACd4E,KAAMyC,EACN7E,UAAWuB,EACX3B,MAAOkF,EACP1E,OAAQwE,EACRjH,KAAM6D,GAERiE,SAAU,CACR3F,OAAQ,EACRtC,aAAc,WACd4E,KAAM4C,EACNhF,UAAWuB,EACX3B,MAAOqF,EACP7E,OAAQ2E,EACRpH,KAAM8D,KAuHCwE,GAAmB,SAC9B1G,EACAuE,EACAE,EACAvE,GACI,IAAD,EAKCoE,EACFtE,EACAuE,GACC,GACDE,EACAxC,EACA/B,GATQmF,EAFP,EAEDxE,OACMyE,EAHL,EAGDzC,KACO0C,EAJN,EAIDlF,MAJC,EAkBCiE,EACFtE,EACAuE,EACA,EACAE,EACAxC,EACA/B,GATQsF,EAfP,EAeD3E,OACM4E,EAhBL,EAgBD5C,KACO6C,EAjBN,EAiBDrF,MAjBC,EA+BCiE,EACFtE,EACAuE,EACA,GACAE,EACAxC,EACA/B,GATQyF,EA5BP,EA4BD9E,OACM+E,EA7BL,EA6BD/C,KACOgD,EA9BN,EA8BDxF,MAUF,MAAO,CACL4F,QAAS,CACP1F,OAAQ,EACRtC,aAAc,UACd4E,KAAMyC,EACN7E,UAAWsB,EACX1B,MAAOkF,EACP1E,OAAQwE,EACRjH,KAAM6D,GAERiE,SAAU,CACR3F,OAAQ,EACRtC,aAAc,WACd4E,KAAM4C,EACNhF,UAAWuB,EACX3B,MAAOqF,EACP7E,OAAQ2E,EACRpH,KAAM6D,GAERkE,QAAS,CACP5F,OAAQ,EACRtC,aAAc,UACd4E,KAAM+C,EACNnF,UAAWsB,EACX1B,MAAOwF,EACPhF,OAAQ8E,EACRvH,KAAM6D,KAOC0E,GAAoB,SAC/B3G,EACAuE,EACAE,EACAvE,GACI,IAAD,EAKCoE,EACFtE,EACAuE,EACA,EACAE,EACAxC,EACA/B,GATQmF,EAFP,EAEDxE,OACMyE,EAHL,EAGDzC,KACO0C,EAJN,EAIDlF,MAJC,EAkBCiE,EACFtE,EACAuE,EACA,GACAE,EACAxC,EACA/B,GATQsF,EAfP,EAeD3E,OACM4E,EAhBL,EAgBD5C,KACO6C,EAjBN,EAiBDrF,MAjBC,EA+BCiE,EACFtE,EACAuE,EACA,EACAE,EACAvC,EACAhC,GATQyF,EA5BP,EA4BD9E,OACM+E,EA7BL,EA6BD/C,KACOgD,EA9BN,EA8BDxF,MA9BC,EA4CCiE,EACFtE,EACAuE,GACC,GACDE,EACAvC,EACAhC,GATQ4F,EAzCP,EAyCDjF,OACMkF,EA1CL,EA0CDlD,KACOmD,EA3CN,EA2CD3F,MAUF,MAAO,CACL4F,QAAS,CACP1F,OAAQ,EACRtC,aAAc,UACd4E,KAAMyC,EACN7E,UAAWsB,EACX1B,MAAOkF,EACP1E,OAAQwE,EACRjH,KAAM6D,GAERiE,SAAU,CACR3F,OAAQ,EACRtC,aAAc,WACd4E,KAAM4C,EACNhF,UAAWuB,EACX3B,MAAOqF,EACP7E,OAAQ2E,EACRpH,KAAM6D,GAERkE,QAAS,CACP5F,OAAQ,EACRtC,aAAc,UACd4E,KAAM+C,EACNnF,UAAWsB,EACX1B,MAAOwF,EACPhF,OAAQ8E,EACRvH,KAAM8D,GAERkE,SAAU,CACR7F,OAAQ,EACRtC,aAAc,WACd4E,KAAMkD,EACNtF,UAAWuB,EACX3B,MAAO2F,EACPnF,OAAQiF,EACR1H,KAAM8D,KAON0E,GAAe,CAErBA,YAAA,iXAKAA,aAAA,4WAMAA,iBAAA,6YAMAA,gBAAA,6cAQAA,cAAA,sMAMAA,eAAA,mYAQAA,cAAA,4XAQAA,eAAA,obAQAA,eAAA,ukBAUAA,gBAAA,oTC59BqBC,GACnB,WAAY5I,GAAe,oBACzB6I,KAAK7I,cAAe,IAAIqF,MAAOyD,cAAcC,QAAQ,IAAK,KAC1DF,KAAKjG,OAAS,IACdiG,KAAKjE,KAAOrC,EACZsG,KAAKrG,UAAYD,EACjBsG,KAAK1I,KAAOoC,EACZsG,KAAKvG,OAAS,EACduG,KAAKpE,YAAc,G,UCVFuE,G,WAWjB,aAAe,yBATfC,OAAS,CACL,OACA,MACA,SACA,SACA,SACA,SAIAJ,KAAKK,MAAQ,E,wDAKb,IAAMC,EAAUN,KAAKI,OAAOJ,KAAKK,OASjC,OAPGL,KAAKK,OAASL,KAAKI,OAAOG,OAEzBP,KAAKK,MAAQ,EAGbL,KAAKK,QAEFC,M,KClBA,SAASE,GAAgBC,GAA4B,IAApBC,EAAmB,uDAAJ,GACvDC,EAAiBC,kBAAO,GAE9BC,qBAAU,WACJF,EAAeG,QACjBH,EAAeG,SAAU,EAEzBL,MAEDC,G,+ICLCK,GAAYC,cAAW,SAACC,GAAD,MAAY,CACvCC,YAAa,CACXlL,OAAQiL,EAAME,QAAQ,GACtBC,SAAU,KAEZC,YAAa,CACXC,UAAWL,EAAME,QAAQ,QAKvBI,GAAW,SAACC,GAAW,IACnBhM,EAAqBgM,EAArBhM,KAAMmI,EAAe6D,EAAf7D,WACR8D,EAAUV,KAFU,EAUoBW,mBAAS,IAV7B,mBAUnBC,EAVmB,KAUFC,EAVE,OAWcF,mBAASlM,EAAKuG,MAX5B,mBAWnB8F,EAXmB,KAWLC,EAXK,OAYcJ,mBAAS,CAAC,CAAClM,EAAKuE,UAZ9B,mBAYnBgI,EAZmB,KAYLC,EAZK,KAcpBjK,EAAWC,cAGjB6I,qBAAU,WACR,GAAIlD,EAAY,CACd,IAAMgE,EAAkBhE,EAAWnI,KAAKyM,KACtC,SAACC,GAAD,OAAUA,EAAKnE,kBAEjB6D,EAAmBD,MAEpB,IAGHnB,IAAgB,WACd,GAAI7C,EAAY,CAEd,IAAMwE,EAAcxE,EAAWnI,KAAK4M,MAClC,SAACF,GAAD,OAAUA,EAAKnE,iBAAmB8D,KAGpC,IAAKM,EAAa,OAGlB,IAAM7K,EAAO9B,EAAK8B,KAAK+G,cAMjB3C,EAHkByG,EAAYhE,QAAQ7G,GAGX8K,MAC/B,SAACF,GAAD,OAAWA,EAAKnI,UAAYvE,EAAKuE,UAIZ,QAAnBvE,EAAKmE,UACP5B,EACEiB,EAAuBxD,EAAK2B,aAAc,QAASuE,EAAS2G,MAG9DtK,EACEiB,EAAuBxD,EAAK2B,aAAc,QAASuE,EAAS4G,SAIjE,CAAC9M,EAAKuE,SAETyG,IAAgB,WACd,GAAI7C,EAAY,CAEd,IAAMwE,EAAcxE,EAAWnI,KAAK4M,MAClC,SAACF,GAAD,OAAUA,EAAKnE,iBAAmB8D,KAIpC,IAAKM,EAAa,OAGlB,IAAM7K,EAAO9B,EAAK8B,KAAK+G,cAMjBkE,EAHkBJ,EAAYhE,QAAQ7G,GAGN2K,KAAI,SAACC,GAAD,OAAUA,EAAKnI,UAGzDiI,EAAgBO,MAEjB,CAACV,IAEJ,IAAMW,EAAehN,EAAK8B,OAASmL,EAEnC,OACE,kBAACC,GAAA,EAAD,KAEE,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAa1K,QAAQ,WAAWlB,UAAWyK,EAAQP,aACjD,kBAACzI,EAAA,EAAD,CAAYxB,GAAG,qCAAf,aAGA,kBAAC4L,GAAA,EAAD,CACEC,QAAQ,oCACR7L,GAAG,8BACHI,MAAO7B,EAAKmE,UACZb,SAAU,SAACC,GAAD,OACRhB,EACEiB,EACExD,EAAK2B,aACL,YACA4B,EAAEE,OAAO5B,SAIfuB,MAAM,aAEN,kBAACmK,GAAA,EAAD,CAAU1L,MAAOoL,GAAjB,OACA,kBAACM,GAAA,EAAD,CAAU1L,MAAOoL,GAAjB,WAKN,kBAACE,GAAA,EAAD,KACE,kBAAChK,EAAA,EAAD,CACE1B,GAAG,kBACH2B,MAAM,SACNtB,KAAK,SACL0L,gBAAiB,CACfC,QAAQ,GAEVnK,SAAU,SAACC,GAAD,OACRhB,EACEiB,EACExD,EAAK2B,aACL,SACA4B,EAAEE,OAAO5B,SAIfA,MAAO7B,EAAKiE,OACZvB,QAAQ,cAIZ,kBAACyK,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAa1K,QAAQ,WAAWlB,UAAWyK,EAAQP,aACjD,kBAACzI,EAAA,EAAD,CAAYxB,GAAG,qCAAf,QACA,kBAAC4L,GAAA,EAAD,CACEC,QAAQ,oCACR7L,GAAG,8BACHI,MAAO7B,EAAK8B,KACZwB,SAAU,SAACC,GAAD,OACRhB,EACEiB,EACExD,EAAK2B,aACL,OACA4B,EAAEE,OAAO5B,SAIfuB,MAAM,QAEN,kBAACmK,GAAA,EAAD,CAAU1L,MAAOoL,GAAjB,QACA,kBAACM,GAAA,EAAD,CAAU1L,MAAOoL,GAAjB,OACA,kBAACM,GAAA,EAAD,CAAU1L,MAAOoL,GAAjB,WAKN,kBAACE,GAAA,EAAD,KACIH,EAiDE,KAhDF7E,EACE,kBAACiF,GAAA,EAAD,CAAa1K,QAAQ,WAAWlB,UAAWyK,EAAQP,aACjD,kBAACzI,EAAA,EAAD,CAAYxB,GAAG,qCAAf,UAGA,kBAAC4L,GAAA,EAAD,CACEC,QAAQ,oCACR7L,GAAG,8BACHI,MAAO7B,EAAKuE,OACZjB,SAAU,SAACC,GAAD,OACRhB,EACEiB,EACExD,EAAK2B,aACL,SACA4B,EAAEE,OAAO5B,SAIfuB,MAAM,QAELmJ,EAAaE,KAAI,SAAC1I,GAAD,OAChB,kBAACwJ,GAAA,EAAD,CAAU1L,MAAOkC,GACd2J,MAAM3J,GAAS,KAAOA,QAM/B,kBAACZ,EAAA,EAAD,CACE1B,GAAG,kBACH2B,MAAM,SACNtB,KAAK,SACL0L,gBAAiB,CACfC,QAAQ,GAEVnK,SAAU,SAACC,GAAD,OACRhB,EACEiB,EACExD,EAAK2B,aACL,SACA4B,EAAEE,OAAO5B,SAIfA,MAAO7B,EAAKuE,OACZ7B,QAAQ,cAMhB,kBAACyK,GAAA,EAAD,MACIH,IACE7E,EAqBA,kBAACiF,GAAA,EAAD,CAAa1K,QAAQ,WAAWlB,UAAWyK,EAAQP,aACjD,kBAACzI,EAAA,EAAD,CAAYxB,GAAG,qCAAf,UAGA,kBAAC4L,GAAA,EAAD,CACEC,QAAQ,oCACR7L,GAAG,8BACH6B,SAAU,SAACC,GAAD,OAAO+I,EAAgB/I,EAAEE,OAAO5B,QAC1CA,MAAOwK,EACPjJ,MAAM,UAEL+I,EAAgBM,KAAI,SAAClG,GAAD,OACnB,kBAACgH,GAAA,EAAD,CAAU1L,MAAO0E,GAAOA,QAhC9B,kBAACpD,EAAA,EAAD,CACE1B,GAAG,OACH2B,MAAM,SACNtB,KAAK,OACLD,MAAO7B,EAAKuG,KACZ/E,UAAWyK,EAAQ0B,UACnBrK,SAAU,SAACC,GAAD,OACRhB,EACEiB,EACExD,EAAK2B,aACL,OACA4B,EAAEE,OAAO5B,SAIf2L,gBAAiB,CACfC,QAAQ,OAuBlB,kBAACN,GAAA,EAAD,CAAWS,MAAO,CAAEC,cAAe,WACjC,kBAACC,GAAA,EAAD,CAAYpL,QAAQ,MAClB,2BAAI1C,EAAK+D,MAAQ/D,EAAKiE,UAI1B,kBAACkJ,GAAA,EAAD,CAAWS,MAAO,CAAEC,cAAe,WACjC,kBAACC,GAAA,EAAD,CAAYpL,QAAQ,MAClB,2BAAI1C,EAAKoG,YAAcpG,EAAKiE,OAA5B,OAIJ,kBAACkJ,GAAA,EAAD,CAAWS,MAAO,CAAEC,cAAe,WACjC,kBAACE,GAAA,EAAD,CACErL,QAAQ,YACRsL,MAAM,YACNxM,UAAWyK,EAAQgC,OACnBC,UAAW,kBAAC,KAAD,MACXC,QAAS,kBAAM5L,EPzQhB,CACLT,KAlC2B,kBAmC3BsM,WOuQqDpO,EAAK2B,iBALtD,aAkIO0M,GApHD,SAACrC,GAAW,IAChB7D,EAAe6D,EAAf7D,WADe,EAEU/F,aAAY,SAACC,GAAD,OAAWA,EAAMC,aAAtDA,EAFe,EAEfA,UACFC,GAHiB,EAEJJ,UACFK,eAHM,EAeA,WACrB,IAAI8L,EAAU,EACVC,EAAc,EACdtK,EAAS,EAEb,IAAK,IAAIgC,KAAO3D,EAAW,CACzB,IAAM4D,EAAW5D,EAAU2D,GAC3BqI,IAAYpI,EAASnC,OAASmC,EAASjC,OAGvCsK,IADErI,EAAS/B,YAAc8I,GAAa/G,EAASnC,QAAUmC,EAASnC,QACrCmC,EAASjC,OACtCA,IAAWiC,EAASjC,OAEtB,MAAO,CACLqK,QAASA,EAAQ1H,QAAQ,GACzB2H,YAAaA,EAAY3H,QAAQ,GACjC3C,UAIqCuK,GAAjCF,EAnCe,EAmCfA,QAASC,EAnCM,EAmCNA,YAAatK,EAnCP,EAmCOA,OAE9B,OACE,kBAACxB,EAAA,EAAD,CAAMC,QAAQ,YACZ,kBAACM,EAAA,EAAD,KACE,kBAACyL,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAOC,aAAW,gBAChB,kBAACC,GAAA,EAAD,KACE,kBAAC1B,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAACW,GAAA,EAAD,CAAYpL,QAAQ,MAApB,cAEF,kBAACyK,GAAA,EAAD,KACE,kBAACW,GAAA,EAAD,CAAYpL,QAAQ,MAApB,WAEF,kBAACyK,GAAA,EAAD,KACE,kBAACW,GAAA,EAAD,CAAYpL,QAAQ,MAApB,SAEF,kBAACyK,GAAA,EAAD,KACE,kBAACW,GAAA,EAAD,CAAYpL,QAAQ,MAApB,WAEF,kBAACyK,GAAA,EAAD,KACE,kBAACW,GAAA,EAAD,CAAYpL,QAAQ,MAApB,WAEF,kBAACyK,GAAA,EAAD,KACE,kBAACW,GAAA,EAAD,CAAYpL,QAAQ,MAApB,YAEF,kBAACyK,GAAA,EAAD,KACE,kBAACW,GAAA,EAAD,CAAYpL,QAAQ,MAApB,iBAEF,kBAACyK,GAAA,EAAD,KACE,kBAACY,GAAA,EAAD,CACEjM,KAAK,SACLY,QAAQ,YACRsL,MAAM,UACNG,QAAS,kBACP5L,EPjXb,CACLT,KAXwB,eAYxB+M,YO+W+C,IAAItE,OALrC,cAaN,kBAACuE,GAAA,EAAD,KA1Ec,WACtB,IAAMhE,EAAS,GACf,IAAK,IAAIrJ,KAAMa,EACbwI,EAAOiE,KACL,kBAAC,GAAD,CAAU5G,WAAYA,EAAYnI,KAAMsC,EAAUb,GAAKwE,IAAKxE,KAGhE,OAAOqJ,EAoEIkE,GACD,kBAAC9B,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAACW,GAAA,EAAD,CAAYpL,QAAQ,MAApB,UAEF,kBAACyK,GAAA,EAAD,KACE,kBAACW,GAAA,EAAD,CAAYpL,QAAQ,MAAMuB,IAE5B,kBAACkJ,GAAA,EAAD,MACA,kBAACA,GAAA,EAAD,MACA,kBAACA,GAAA,EAAD,MACA,kBAACA,GAAA,EAAD,KACE,kBAACW,GAAA,EAAD,CAAYpL,QAAQ,MAAM4L,IAE5B,kBAACnB,GAAA,EAAD,KACE,kBAACW,GAAA,EAAD,CAAYpL,QAAQ,MAAM6L,IAE5B,kBAACpB,GAAA,EAAD,KACE,kBAACY,GAAA,EAAD,CACErL,QAAQ,YACRsL,MAAM,YACNE,UAAW,kBAAC,KAAD,MACXC,QAAS,kBAAM5L,EPjX1B,CACLT,KAxC2B,sBOoZb,sB,oBC/YLmN,GAAkBC,IAAMC,cALhB,CACnBjN,UAAU,EACVkN,YAAa,e,gFCoKAC,GA3JK,SAAC,GAAoB,IAAlBlH,EAAiB,EAAjBA,WAAiB,EACd+G,IAAMhD,UAAS,GADD,mBAC/BoD,EAD+B,KACzBC,EADyB,KAEhCC,EAAYN,IAAM9D,OAAO,MACvBjJ,EAAcC,aAAY,SAACC,GAAD,OAAWA,EAAMC,aAA3CH,UACAuB,EAAuCvB,EAAvCuB,aAAcC,EAAyBxB,EAAzBwB,WAAYC,EAAazB,EAAbyB,SAC5BrB,EAAWC,cAMXiN,EAAc,SAACC,EAAOC,EAAcC,GACpCJ,EAAUlE,SAAWkE,EAAUlE,QAAQuE,SAASH,EAAMjM,UAItDkM,IACFpN,ETgBsB,SAACoN,GAC3B,MAAO,CACL7N,KA7CyB,gBA8CzB6N,gBSlBInM,CACEmM,EAAajM,EAAcC,EAAYwE,EAAYvE,KAGvDrB,EChCG,CACLT,KAJoB,WAKpBgO,KD8BmCF,KAGnCL,GAAQ,KAGV,SAASQ,EAAkBL,GACP,QAAdA,EAAMzJ,MACRyJ,EAAMM,iBACNT,GAAQ,IAKZ,IAAMU,EAAWf,IAAM9D,OAAOkE,GAS9B,OARAJ,IAAM7D,WAAU,YACW,IAArB4E,EAAS3E,UAA6B,IAATgE,GAC/BE,EAAUlE,QAAQ4E,QAGpBD,EAAS3E,QAAUgE,IAClB,CAACA,IAGF,6BACE,kBAACvB,GAAA,EAAD,CACEoC,IAAKX,EACLY,gBAAed,EAAO,sBAAmBe,EACzCC,gBAAc,OACdnC,QA5Ce,WACnBoB,GAAQ,SAACU,GAAD,OAAeA,MA4CnBjC,MAAM,WALR,0BASA,kBAACuC,GAAA,EAAD,CACEjB,KAAMA,EACNkB,SAAUhB,EAAUlE,QACpBmF,UAAMJ,EACNK,YAAU,EACVC,eAAa,IAEZ,gBAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,UAApB,OACC,kBAACC,GAAA,EAAD,iBACMF,EADN,CAEEhD,MAAO,CACLmD,gBACgB,WAAdF,EAAyB,aAAe,mBAG5C,kBAACG,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAmBC,YAAazB,GAC9B,kBAAC0B,GAAA,EAAD,CACEC,cAAe9B,EACf7N,GAAG,iBACH4P,UAAWtB,GAEX,kBAACxC,GAAA,EAAD,CACEY,QAAS,SAAC5K,GAAD,OACPkM,EACElM,EACA0J,ENsYQ,sBM1Yd,oBAWA,kBAACM,GAAA,EAAD,CACEY,QAAS,SAAC5K,GAAD,OACPkM,EACElM,EACA0J,EN4aO,qBMhbb,mBAWA,kBAACM,GAAA,EAAD,CACEY,QAAS,SAAC5K,GAAD,OACPkM,EAAYlM,EAAG0J,ENodR,mBMtdX,iBAOA,kBAACM,GAAA,EAAD,CACEY,QAAS,SAAC5K,GAAD,OACPkM,EAAYlM,EAAG0J,EN8fP,oBMhgBZ,kBAOA,kBAACM,GAAA,EAAD,CACEY,QAAS,SAAC5K,GAAD,OACPkM,EAAYlM,EAAG0J,GNqrBP,oBMvrBZ,kBAOA,kBAACM,GAAA,EAAD,CACEY,QAAS,SAAC5K,GAAD,OACPkM,EACElM,EACA0J,GNgxBO,qBMpxBb,mBAWA,kBAACM,GAAA,EAAD,CACEY,QAAS,SAAC5K,GAAD,OACPkM,EAAYlM,EAAG0J,ENsLV,iBMxLT,eAOA,kBAACM,GAAA,EAAD,CACEY,QAAS,SAAC5K,GAAD,OACPkM,EAAYlM,EAAG0J,ENmRT,kBMrRV,yB,yEEvIZ1B,GAAYC,cAAW,SAACC,GAAD,MAAY,CACvC6F,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAahG,EAAME,QAAQ,IAE7B/I,MAAO,CACL2O,SAAU,GAEZG,OAAQ,CACNC,aAAc,OACdC,SAAU,WACVC,OAAQ,UAIG,SAASC,GAAT,GAKX,IAJFC,EAIC,EAJDA,aACA5J,EAGC,EAHDA,WACA6J,EAEC,EAFDA,YACAvG,EACC,EADDA,MAEMQ,EAAUV,KACVhJ,EAAWC,cAFhB,EAGiCyP,qBAAWhD,IAArC/M,EAHP,EAGOA,SAAUkN,EAHjB,EAGiBA,YAElB,OACE,kBAAC8C,GAAA,EAAD,CAAQN,SAAS,SAASpQ,UAAWyK,EAAQyF,QAC3C,kBAACS,GAAA,EAAD,KACE,kBAACrE,GAAA,EAAD,CAAYpL,QAAQ,KAAKlB,UAAWyK,EAAQrJ,OAA5C,2BAIA,yBAAKuL,QAAS6D,GACD,SAAVvG,EAAmB,kBAAC,KAAD,MAAsB,kBAAC,KAAD,OAE5C,kBAAC,GAAD,CAAasG,aAAcA,EAAc5J,WAAYA,IACrD,kBAACiK,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEC,QACE,kBAACC,GAAA,EAAD,CACEC,QAAStQ,EACToB,SAAU,kBACR8L,GAAY,SAACqD,GAEX,OADa,IAATA,GAAelQ,EXc9B,CACLT,KAbsB,gBWDE2Q,MAGZ9D,aAAW,qBAGfvL,MAAO,oBAGX,kBAACsP,GAAA,EAAD,CACE/D,aAAW,SACXX,MAAM,YACN2E,KAAK,4DACLlP,OAAO,UAEP,kBAAC,KAAD,CAAYuK,MAAM,c,kCCvEtBzC,GAAYC,aAAW,CAC3BkB,KAAM,CAEJkG,OAAQ,OACRC,MAAO,UA+DIC,GA3DA,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACG7G,mBAAS,IADZ,mBAC1B8G,EAD0B,KACdC,EADc,KAE3BhH,EAAUV,KAchB,OACE,oCACE,kBAAC2H,GAAA,EAAD,CAAMxG,MAAI,EAACyG,GAAI,IAEb,kBAACC,GAAA,EAAD,CACE3R,GAAG,iBACHuM,MAAM,UACNrF,QAAS0K,GACTC,eAAgB,SAACxP,GAAD,OACdA,EAAOyP,cAAgB,KAAOzP,EAAO0P,aAEvCC,cAAe,SAAC9K,EAAStG,GAAV,OAvBD,SAACsG,EAAStG,GAE9B,IAAMqR,EAAQrR,EAAM2Q,WAAWnK,cAI/B,OAFAoK,EAAcS,GAEVA,EAAM3I,QAAU,EAAU,GAGvBpC,EAAQgL,QAAO,SAACC,GAAD,OAAOA,EAAEL,cAAcM,SAASH,MAcbD,CAAc9K,EAAStG,IAC1Db,UAAWyK,EAAQS,KACnBpJ,SAAU,SAACoM,EAAO7N,GAAR,OACRA,GAASoR,EAAcpR,EAAM0R,gBAE/BO,YAAa,SAACC,GAAD,OACX,kBAAC5Q,EAAA,EAAD,iBACM4Q,EADN,CAEE3Q,MAAM,gBACNV,QAAQ,WACRsL,MAAM,cAGVgG,cACEhB,EAAWjI,QAAU,EAAI,uBAAyB,sBAIxD,kBAACmI,GAAA,EAAD,CAAMxG,MAAI,EAACyG,GAAI,GACb,kBAACpF,GAAA,EAAD,CACEC,MAAM,UACNtL,QAAQ,YACRyL,QAAS,kBAAM4E,EAAWC,IAC1BxR,UAAWyK,EAAQS,MAJrB,a,kDCvBOuH,GAlCD,SAACjI,GAEb,IAAMyD,EAAc,SAACC,EAAOwE,GACX,cAAXA,GAGJlI,EAAMmI,cAGR,OACE,kBAACC,GAAA,EAAD,CACEC,aAAc,CACZC,SAAU,MACVC,WAAY,QAEdjF,MAAM,EACNkF,iBAAkB,IAClBC,QAAShF,EACTiF,QAAS1I,EAAM2I,SACfC,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACnC,GAAA,EAAD,CACEoC,KAAK,QACLnG,aAAW,QACXX,MAAM,UACNG,QAASsB,GAET,kBAAC,KAAD,CAAWsF,SAAS,e,UCXjBC,GAdM,WAAO,IAClB7S,EAAcC,aAAY,SAACC,GAAD,OAAWA,EAAMC,aAA3CH,UAER,OACE,kBAAC,KAAD,CAAMO,QAAQ,YACZ,kBAAC,KAAKuS,KAAN,KACE,kBAACnH,GAAA,EAAD,CAAYpL,QAAQ,MAAMP,EAAU4D,QACpC,kBAAC+H,GAAA,EAAD,CAAYpL,QAAQ,MAApB,UAAiCP,EAAUuB,aAA3C,KACA,kBAACoK,GAAA,EAAD,CAAYpL,QAAQ,MAAMI,IAAO,IAAIkE,MAAQjE,OAAO,kB,+BCPtDwI,GAAYC,aAAW,CAC3B8F,KAAM,CACJ4D,MAAO,KAETC,MAAO,CACLD,MAAO,IAETE,OAAQ,CAAEF,MAAO,SAGJ,SAASG,GAAT,GAA4D,IAArCxT,EAAoC,EAApCA,MAAOyT,EAA6B,EAA7BA,SAAU1S,EAAmB,EAAnBA,MAAO4B,EAAY,EAAZA,IAAKH,EAAO,EAAPA,IAC3D4H,EAAUV,KAMhB,OACE,yBAAK/J,UAAWyK,EAAQqF,MACtB,kBAACxD,GAAA,EAAD,CAAYrM,GAAG,eAAe8T,cAAY,GACvC3S,GAEH,kBAACsQ,GAAA,EAAD,CAAMsC,WAAS,EAAC7J,QAAS,EAAG8J,WAAW,UACrC,kBAACvC,GAAA,EAAD,CAAMxG,MAAI,GACR,kBAAC,KAAD,OAEF,kBAACwG,GAAA,EAAD,CAAMxG,MAAI,EAACgJ,IAAE,GACX,kBAACC,GAAA,EAAD,CACEnR,IAAKA,EACLH,IAAKA,EACLxC,MAAwB,kBAAVA,EAAqBA,EAAQ,EAC3CyB,SAlBiB,SAACoM,EAAOkG,GACjCN,EAASM,IAkBDC,kBAAgB,eAChBrU,UAAWyK,EAAQmJ,UAGvB,kBAAClC,GAAA,EAAD,CAAMxG,MAAI,M,kCCJHoJ,GAlCO,SAAC,GAAsB,IAApB9V,EAAmB,EAAnBA,KAAM+F,EAAa,EAAbA,OACvBgQ,EAAU,GAChB/V,EAAKgW,SAAQ,SAACC,GACZF,EAAQhH,KAAK,CACX9B,EAAsBgJ,EAAI,GAAK,KAC/BA,EAAI,GACJA,EAAI,GACJA,EAAI,GACJA,EAAI,QAIR,IAAIC,EAAiBC,QAAcC,QAEnCF,EAAeG,QAAQN,GAEvB,IAAIO,EAAQH,WAOZ,OALgBG,EAAMC,KAAK,GACjBC,KAAKN,EAAeO,MAAM,CAAE5U,MAAO,KAAM6U,KAAK3Q,GACxDuQ,EAAMK,WAAWH,KAAKN,EAAeO,MAAM,CAAE5U,MAAO,KACpDyU,EAAMM,YAAY,aAAc,cAG9B,oCACIN,EAGA,kBAAC,KAAD,CAAUpB,MAAM,OAAOtC,OAAQ,IAAKiE,SAAUP,EAAO1T,MAAOmD,IAF5D,wD,kDC3BR+Q,KAAWrL,MAAQ,CACjBb,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEF0L,MAAO,CACLS,gBAAiB,cACjBnJ,MAAO,CACLoJ,WAAY,2BAEdC,gBAAiB,WAEnBrU,MAAO,CACLgL,MAAO,CACLI,MAAO,QACPkJ,cAAe,YACfnC,SAAU,SAGdoC,SAAU,CACRvJ,MAAO,CACLI,MAAO,QACPkJ,cAAe,cAGnBpW,MAAO,CACLsW,cAAe,QACfC,OAAQ,CACNzJ,MAAO,CACLI,MAAO,UAGXsJ,UAAW,QACXC,mBAAoB,UACpBC,UAAW,QACX5U,MAAO,CACLgL,MAAO,CACLI,MAAO,WAIb/M,MAAO,CACLmW,cAAe,QACfC,OAAQ,CACNzJ,MAAO,CACLI,MAAO,UAGXsJ,UAAW,QACXC,mBAAoB,UACpBC,UAAW,QACXC,UAAW,EACX7U,MAAO,CACLgL,MAAO,CACLI,MAAO,WAIb0J,QAAS,CACPX,gBAAiB,sBACjBnJ,MAAO,CACLI,MAAO,YAGX2J,YAAa,CACXC,OAAQ,CACNC,WAAY,CACV7J,MAAO,QACPJ,MAAO,CACLmH,SAAU,SAGd+C,OAAQ,CACNR,UAAW,SAGfS,QAAS,CACPC,UAAW,WAEbC,YAAa,CACXX,UAAW,SAEbY,SAAU,CACRlK,MAAO,UAGXmK,OAAQ,CACNpB,gBAAiB,cACjBqB,UAAW,CACTpK,MAAO,SAETqK,eAAgB,CACdrK,MAAO,QAETsK,gBAAiB,CACftK,MAAO,WAETpL,MAAO,CACLgL,MAAO,CACLI,MAAO,aAIbuK,QAAS,CACP3K,MAAO,CACLI,MAAO,SAGXqJ,OAAQ,CACNzJ,MAAO,CACLI,MAAO,UAGXwK,UAAW,CACTC,qBAAsB,CACpBzK,MAAO,SAET0K,qBAAsB,CACpB1K,MAAO,UAGX2K,WAAY,CACVC,cAAe,CACbC,aAAc,UACdpN,MAAO,CACLqN,KAAM,aAKZC,cAAe,CACbC,YAAa,CACXF,KAAM,UACNG,OAAQ,UACRrL,MAAO,CACLI,MAAO,QAETkL,OAAQ,CACNC,MAAO,CACLL,KAAM,QACNG,OAAQ,UACRrL,MAAO,CACLI,MAAO,UAGXoL,OAAQ,CACNN,KAAM,UACNG,OAAQ,UACRrL,MAAO,CACLI,MAAO,YAKfqL,oBAAqB,UACrBC,WAAY,CACVvC,gBAAiB,OACjB/I,MAAO,UAETuL,WAAY,CACVvL,MAAO,WAGXwL,UAAW,CACTC,QAAS,CACP1C,gBAAiB,OACjB2C,YAAa,QAEfC,aAAc,OACdC,SAAU,wBACVhC,OAAQ,CACN5J,MAAO,UACPsJ,UAAW,WAEbxW,MAAO,CACLsW,cAAe,YAGnByC,UAAW,CACTC,mBAAoB,UACpBC,eAAgB,UAChBC,iBAAkB,OAClBC,sBAAuB,UACvBC,kBAAmB,UACnBC,WAAY,OACZC,qBAAsB,UACtBC,iBAAkB,YAItB,IAMeC,GANS,SAAC,GAAqB,IAAnBta,EAAkB,EAAlBA,KAAkB,EAAZyL,MAG/B,OAFAqL,KAAWyD,WAAWzD,KAAWrL,OAE1B,kBAAC,KAAD,CAAiB+O,WAAY1D,KAAYnO,QAAS3I,K,qBC/G5Cya,OA3Ff,YAAoC,IAArBC,EAAoB,EAApBA,SASTC,EAAc,CAChB5B,cAAe,CACb6B,SAAU,GAGZhY,MAAO,CACLiY,KAf6B,EAAV9U,OAeJ,eAGjB9E,MAAO,CACL,CACEoW,OAAQ,CACNyD,MAAO,QACPxV,GAAI,GAEN1C,MAAO,CACLiY,KAAM,QAERjI,OAAQ,MACRmI,UAAW,EACXC,OAAQ,CACNC,SAAS,IAGb,CACE5D,OAAQ,CACNyD,MAAO,QACPxV,GAAI,GAEN1C,MAAO,CACLiY,KAAM,UAERK,IAAK,MACLtI,OAAQ,MACRuI,OAAQ,EACRJ,UAAW,IAIfrD,QAAS,CACP0D,OAAO,GAGTxD,OAAQ,CACN,CACE9V,KAAM,cACN9B,KAAM0a,EACNW,aAAc,CACZC,MAxDY,CAClB,CACE,OACA,CAAC,IAEH,CAAC,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,OAsDrB,CACExZ,KAAM,SACN9B,KAAO,WAGL,IAFA,IAAIub,EAAa,GAERC,EAAI,EAAGA,EAAId,EAAS3P,OAAQyQ,IACnCD,EAAWxM,KAAK,CACd2L,EAASc,GAAG,GACZd,EAASc,GAAG,KAGhB,OAAOD,EATF,GAWPta,MAAO,KAKb,OACE,yBAAKO,UAAU,OAEX,kBAAC,KAAD,CACEgZ,WAAYiB,KACZC,gBAAiB,aACjB/S,QAASgS,M,8DC9EZ,SAASgB,GAAgBrW,GAC9B,OAAOlB,KAAKwX,IAAIxX,KAAKyX,GAAK,EAAIzX,KAAKwX,IAAItW,EAAG,GAAM,GAAKlB,KAAKc,KAAK,EAAId,KAAKoB,IAcnE,SAASsW,GAASC,EAAGxW,EAAGyW,EAAGjX,EAAGD,EAAGoB,GACtC,OAAIA,EAASpE,OAASoC,EACjBgC,EAAS/B,YAAcD,GAChB,EAEH,EACEgC,EAASpE,OAASoC,EACpB+X,GAAWF,EAAGxW,EAAGyW,EAAGjX,EAAGD,GAEvBoB,EAASpE,OAASoC,EAwCtB,SAAmB6X,EAAGxW,EAAGyW,EAAGjX,EAAGD,GACpC,IAAIoX,EAAQD,GAAWF,EAAGxW,EAAGyW,EAAGjX,EAAGD,GAAK,EACxC,OAAkB,IAAXoX,GAAgB3W,IAAMwW,EAAI,EAAIG,EAzC5BC,CAAUJ,EAAGxW,EAAGyW,EAAGjX,EAAGD,IAGvB,EAcH,SAASmX,GAAWF,EAAGxW,EAAGyW,EAAGjX,EAAGD,GACrC,IAAIsX,EAAIC,KAAGC,KAAKP,EAAGxW,EAAGyW,EAAGjX,EAAGD,GAO5B,OALKyX,SAASH,GAGJC,KAAGG,WAAWJ,GAFdL,EAAIxW,EAAI,EAAI,EAmCjB,SAASkX,GAAOV,EAAGxW,EAAGyW,EAAGjX,EAAGD,EAAGoB,EAAUwW,GAE9C,OADAA,EAAQA,GAAS,IACbxW,EAASpE,OAASoC,EAAiB,EACnCgC,EAASpE,OAASoC,EAoBjB,SAAkB6X,EAAGxW,EAAGyW,EAAGjX,EAAGD,GACnC,IAAIsX,EAAIC,KAAGC,KAAKP,EAAGxW,EAAGyW,EAAGjX,EAAGD,GAC5B,OAAK4I,MAAM0O,GAKF,EAHL7W,EAAIyW,EAAI5X,KAAKwX,IAAIxX,KAAKyX,GAAI,EAAI/W,EAAIkX,GAAKK,KAAGG,WAAWJ,EAAIrX,EAAIX,KAAKc,KAAK8W,IAvBlEW,CAASZ,EAAGxW,EAAGyW,EAAGjX,EAAGD,GAAK4X,EAE1BxW,EAASpE,OAASoC,EAuCtB,SAAiB6X,EAAGxW,EAAGyW,EAAGjX,EAAGD,GAClC,IAAIsX,EAAIC,KAAGC,KAAKP,EAAGxW,EAAGyW,EAAGjX,EAAGD,GAC5B,OAAK4I,MAAM0O,GASF,GAPJ,EACD7W,EACAyW,EACA5X,KAAKwX,IAAIxX,KAAKyX,GAAI,EAAI/W,EAAIkX,GAC1BK,KAAGG,WAAWzX,EAAIX,KAAKc,KAAK8W,GAAKI,GA9C5BQ,CAAQb,EAAGxW,EAAGyW,EAAGjX,EAAGD,GAAK4X,EAE3B,EAkFF,SAASG,GAASd,EAAGxW,EAAGyW,EAAGjX,EAAGD,EAAGoB,EAAUwW,GAEhD,OADAA,EAAQA,GAAS,IACbxW,EAASpE,OAASoC,EAAiB,EACnCgC,EAASpE,OAASoC,EAoBjB,SAAoB6X,EAAGxW,EAAGyW,EAAGjX,EAAGD,GACrC,IAAIsX,EAAIC,KAAGC,KAAKP,EAAGxW,EAAGyW,EAAGjX,EAAGD,GAC5B,OAAIyX,SAASH,IAEP,EAAIrX,EAAIgX,EAAIJ,GAAgBS,IAAO,EAAIhY,KAAKc,KAAK8W,IACnDzW,EAAIT,EAAIV,KAAKwX,IAAIxX,KAAKyX,GAAI,EAAI/W,EAAIkX,GAAKK,KAAGG,WAAWJ,EAAIrX,EAAIX,KAAKc,KAAK8W,IAGlE,EA3BAc,CAAWf,EAAGxW,EAAGyW,EAAGjX,EAAGD,GAAK4X,EAE5BxW,EAASpE,OAASoC,EAwCtB,SAAmB6X,EAAGxW,EAAGyW,EAAGjX,EAAGD,GACpC,IAAIsX,EAAIC,KAAGC,KAAKP,EAAGxW,EAAGyW,EAAGjX,EAAGD,GAC5B,OAAIyX,SAASH,IAEP,EAAIrX,EAAIgX,EAAIJ,GAAgBS,IAAO,EAAIhY,KAAKc,KAAK8W,IACnDzW,EAAIT,EAAIV,KAAKwX,IAAIxX,KAAKyX,GAAI,EAAI/W,EAAIkX,GAAKK,KAAGG,WAAWzX,EAAIX,KAAKc,KAAK8W,GAAKI,GAGnE,EA/CAW,CAAUhB,EAAGxW,EAAGyW,EAAGjX,EAAGD,GAAK4X,EAE7B,EClLT,IAAMnR,GAAYC,aAAW,CAC3B4K,MAAO,CACLxK,SAAU,OAIC,SAASoR,KACtB,IAAM/Q,EAAUV,KADoB,EAEHnJ,aAAY,SAACC,GAAD,OAAWA,EAAMC,aAAtDA,EAF4B,EAE5BA,UAAWH,EAFiB,EAEjBA,UACb8a,EAAOC,OAAOD,KAAK3a,GAEnB6a,EAAiB,CACrBlZ,OAAQ,EACRmZ,GAAI,EACJlB,MAAO,EACPmB,MAAO,EACPC,IAAK,EACLC,MAAO,EACPC,KAAM,GAGR,OACE,kBAAC/O,GAAA,EAAD,CAAgBgP,UAAWzM,MACzB,kBAACtC,GAAA,EAAD,CAAOlN,UAAWyK,EAAQmK,MAAOzH,aAAW,gBAC1C,kBAACC,GAAA,EAAD,KACE,kBAAC1B,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,iBACA,kBAACA,GAAA,EAAD,eACA,kBAACA,GAAA,EAAD,CAAW2N,MAAM,SAAjB,MACA,kBAAC3N,GAAA,EAAD,CAAW2N,MAAM,SAAjB,SACA,kBAAC3N,GAAA,EAAD,CAAW2N,MAAM,SAAjB,SACA,kBAAC3N,GAAA,EAAD,CAAW2N,MAAM,SAAjB,OACA,kBAAC3N,GAAA,EAAD,CAAW2N,MAAM,SAAjB,SACA,kBAAC3N,GAAA,EAAD,CAAW2N,MAAM,SAAjB,UAGJ,kBAAChM,GAAA,EAAD,KACGmO,EAAKxQ,KAAI,SAACxG,GACT,IAAMC,EAAW5D,EAAU2D,GAC3BwB,QAAQxC,IACN9C,EAAUuB,aACVwC,EAAS3B,OACT0I,EAAqB/G,EAASK,MAC9BpE,EAAUwB,WAAa,IACvBxB,EAAUyB,SAAW,IACrBsC,GAGFuB,QAAQxC,IAAIiB,GAGZ,IAAMwX,EACJxX,EAASjC,OACT0Z,GACExb,EAAUuB,aACVwC,EAAS3B,OACT0I,EAAqB/G,EAASK,MAC9BpE,EAAUwB,WAAa,IACvBxB,EAAUyB,SAAW,IACrBsC,GAEF,IAEI0X,EACJ1X,EAASjC,OD8KhB,SAAkB8X,EAAGxW,EAAGyW,EAAGjX,EAAGD,EAAGoB,GACtC,GAAIA,EAASpE,OAASoC,EAAU,OAAO,EACvC,IAAIkY,EAAIC,KAAGC,KAAKP,EAAGxW,EAAGyW,EAAGjX,EAAGD,GAC5B,OAAOyX,SAASH,GAAKT,GAAgBS,IAAML,EAAIhX,EAAIX,KAAKc,KAAK8W,IAAM,EChLvD2B,CACExb,EAAUuB,aACVwC,EAAS3B,OACT0I,EAAqB/G,EAASK,MAC9BpE,EAAUwB,WAAa,IACvBxB,EAAUyB,SAAW,IACrBsC,GAEF,IAEI2X,EACJ3X,EAASjC,OACT0Z,GACExb,EAAUuB,aACVwC,EAAS3B,OACT0I,EAAqB/G,EAASK,MAC9BpE,EAAUwB,WAAa,IACvBxB,EAAUyB,SAAW,IACrBsC,GAEF,IAEI4X,EACJ5X,EAASjC,OACT0Z,GACExb,EAAUuB,aACVwC,EAAS3B,OACT0I,EAAqB/G,EAASK,MAC9BpE,EAAUwB,WAAa,IACvBxB,EAAUyB,SAAW,IACrBsC,GAEF,IAEI6X,EACJ7X,EAASjC,ODiDhB,SAAiB8X,EAAGxW,EAAGyW,EAAGjX,EAAGD,EAAGoB,GACrC,GAAIA,EAASpE,OAASoC,EACpB,OAAO,EAET,IAAIkY,EAAIC,KAAGC,KAAKP,EAAGxW,EAAGyW,EAAGjX,EAAGD,GAC5B,OAAOyX,SAASH,GAAML,EAAI3X,KAAKc,KAAK8W,GAAKL,GAAgBS,GAAM,IAAM,ECrDzDuB,CACExb,EAAUuB,aACVwC,EAAS3B,OACT0I,EAAqB/G,EAASK,MAC9BpE,EAAUwB,WAAa,IACvBxB,EAAUyB,SAAW,IACrBsC,GAEF,IAWF,OARAiX,EAAeC,IAAMjb,EAAUyB,SAC/BuZ,EAAelZ,QAAUiC,EAASjC,OAClCkZ,EAAejB,OAASwB,EACxBP,EAAeE,OAASO,EACxBT,EAAeG,KAAOO,EACtBV,EAAeI,OAASO,EACxBX,EAAeK,MAAQO,EAGrB,kBAAC7Q,GAAA,EAAD,CAAUjH,IAAKA,GAEb,kBAACkH,GAAA,EAAD,CAAWsQ,UAAU,KAAKO,MAAM,OAC7B9X,EAAS/B,UACR,IACA+B,EAASpE,KACT,KACAK,EAAUuB,cAGd,kBAACyJ,GAAA,EAAD,CAAWsQ,UAAU,KAAKO,MAAM,OAC7B9X,EAASjC,QAGZ,kBAACkJ,GAAA,EAAD,CAAW2N,MAAM,SAAS3Y,EAAUyB,SAAW,KAE/C,kBAACuJ,GAAA,EAAD,CAAW2N,MAAM,SAAS4C,EAAc9W,QAAQ,IAEhD,kBAACuG,GAAA,EAAD,CAAW2N,MAAM,SAAS8C,EAAchX,QAAQ,IAEhD,kBAACuG,GAAA,EAAD,CAAW2N,MAAM,SAAS+C,EAAYjX,QAAQ,IAE9C,kBAACuG,GAAA,EAAD,CAAW2N,MAAM,SAASgD,EAAclX,QAAQ,IAEhD,kBAACuG,GAAA,EAAD,CAAW2N,MAAM,SAASiD,EAAanX,QAAQ,QAIrD,kBAACsG,GAAA,EAAD,CAAUjH,IAAI,SAEZ,kBAACkH,GAAA,EAAD,CAAWsQ,UAAU,KAAKO,MAAM,OAAhC,SAIA,kBAAC7Q,GAAA,EAAD,CAAWsQ,UAAU,KAAKO,MAAM,OAC7Bb,EAAelZ,QAGlB,kBAACkJ,GAAA,EAAD,CAAW2N,MAAM,SAAS3Y,EAAUyB,SAAW,KAE/C,kBAACuJ,GAAA,EAAD,CAAW2N,MAAM,SAASqC,EAAejB,MAAMtV,QAAQ,IAEvD,kBAACuG,GAAA,EAAD,CAAW2N,MAAM,SAASqC,EAAeE,MAAMzW,QAAQ,IAEvD,kBAACuG,GAAA,EAAD,CAAW2N,MAAM,SAASqC,EAAeG,IAAI1W,QAAQ,IAErD,kBAACuG,GAAA,EAAD,CAAW2N,MAAM,SAASqC,EAAeI,MAAM3W,QAAQ,IAEvD,kBAACuG,GAAA,EAAD,CAAW2N,MAAM,SAASqC,EAAeK,KAAK5W,QAAQ,Q,kCC5K5D2E,GAAYC,cAAW,SAACC,GAAD,MAAY,CACvCwS,MAAO,CACLC,QAASzS,EAAME,QAAQ,SAIZ,SAASwS,KACtB,IAAMrO,EAAO1N,aAAY,SAACC,GAAD,OAAWA,EAAMiI,gBADG,EAErB4B,oBAAS,GAFY,mBAEtCoD,EAFsC,KAEhCC,EAFgC,OAGPL,IAAMhD,SAAS4D,EAAKA,MAHb,mBAGtCsO,EAHsC,KAGzBC,EAHyB,KAK7CrT,IAAgB,WACdqT,EAAevO,EAAKA,MACpBP,GAAQ,KACP,CAACO,EAAKA,OAET,IAAML,EAAc,SAACC,EAAOwE,GACX,cAAXA,GAGJ3E,GAAQ,IAOJtD,EAAUV,KAEhB,OACE,6BACE,kBAAC6I,GAAA,EAAD,CACEnO,IAAKmY,EAAcA,EAAYnY,SAAMoK,EACrCgE,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdjF,KAAMA,EACNmF,QAAShF,EACT6O,SAhBe,WACnBD,OAAehO,IAgBXqE,QAASxQ,GAAiBka,GAC1BxJ,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACnC,GAAA,EAAD,CACE/D,aAAW,QACXX,MAAM,UACNxM,UAAWyK,EAAQgS,MACnB9P,QAASsB,GAET,kBAAC,KAAD,WC5Bd,IAAMlE,GAAYC,aAAW,CAC3B+S,OAAQ,CACN3L,OAAQ,QAEV4L,IAAK,CACHhe,OAAQ,SAkoBGia,GA9nBH,SAAC,GAA4B,IAA1BzI,EAAyB,EAAzBA,YAAavG,EAAY,EAAZA,MAAY,EACLrJ,aAAY,SAACC,GAAD,OAAWA,EAAMC,aAAtDA,EAD8B,EAC9BA,UAAWH,EADmB,EACnBA,UACb2N,EAAO1N,aAAY,SAACC,GAAD,OAAWA,EAAMiI,gBAClC3G,EAAuCxB,EAAvCwB,WAAYC,EAA2BzB,EAA3ByB,SAAUF,EAAiBvB,EAAjBuB,aACxBnB,EAAWC,cAJqB,EAKd0J,mBAAS,MALK,mBAK/BlM,EAL+B,KAKzBgC,EALyB,OAMVkK,mBAAS,MANC,mBAM/BuS,EAN+B,KAMvBC,EANuB,OAOAxS,mBAAS,MAPT,mBAO/ByS,EAP+B,KAOlBC,EAPkB,OAQN1S,oBAAS,GARH,mBAQ/BhK,EAR+B,KAQrBkN,EARqB,OASFlD,qBATE,mBAS/B/D,EAT+B,KASnB0W,EATmB,OAUd3S,qBAVc,mBAU/B4S,GAV+B,KAUzBC,GAVyB,QAWd7S,qBAXc,qBAW/B8S,GAX+B,MAWzBC,GAXyB,SAYM/S,qBAZN,qBAY/BgT,GAZ+B,MAYfC,GAZe,SAaIjT,oBAAS,GAbb,qBAa/BkT,GAb+B,MAahBC,GAbgB,SAcInT,oBAAS,GAdb,qBAc/BoT,GAd+B,MAchBC,GAdgB,SAedrT,mBAAS,UAfK,qBAe/BsT,GAf+B,MAezBC,GAfyB,SAgBVvT,mBAAS,MAhBC,qBAgB/BwT,GAhB+B,MAgBvBC,GAhBuB,MAiBhC9d,GAAQ,CAAEK,WAAUkN,eAjBY,GAkBUlD,mBAAS,MAlBnB,qBAkB/B0T,GAlB+B,MAkBbC,GAlBa,MAmBhC5T,GAAUV,KACVuU,GAAWC,eAEjBtY,QAAQxC,IAAI6K,EAAKA,MAGjB,IAAMkQ,GAAUC,uBAAY,SAACvL,GAC3BgK,EAAU,kBAAC,GAAD,CAAOvK,WAAY,kBAAMuK,EAAU,QAAQhK,MACpD,IAGGwL,GAAeD,uBAAY,SAACvL,GAChCkK,EACE,kBAAC,GAAD,CAAOzK,WAAY,kBAAMyK,EAAe,QAAQlK,MAEjD,IAEGyL,GAAY,uCAAG,4BAAApZ,EAAA,sEACDqZ,KAAMC,KACtBC,oDACA,CACEhe,YACAH,cALe,OACbwE,EADa,OAQP,qFACZqZ,GADY,qFACErZ,EAAI3G,KAAKyB,IATJ,2CAAH,qDAaZ8e,GAAa,WAEjB,GAAsC,IAAlCrD,OAAOD,KAAK3a,GAAWyI,OACzB,OAAOiV,GAAQ,8BAGjB,IAAK7d,EAAUuB,cAAgB,EAC7B,OAAOsc,GAAQ,oCAGjB,GAAItS,OAAOvL,EAAUyB,UACnB,OAAOoc,GAAQ,sCAEjB,IAAMQ,EAAU,GACZC,EAAY,EACZC,EAAYrY,IAEVsY,EAAS,GACTC,EAAc,GAgBpB,IAAK,IAAInf,KAbLud,MACGA,GAAOyB,IAAWA,GAAazB,KAC/BA,GAAO0B,IAAWA,GAAa1B,IACpCwB,EAAQzR,MAAMiQ,KAGZF,MACGA,GAAO2B,IAAWA,GAAa3B,KAC/BA,GAAO4B,IAAWA,GAAa5B,IACpC0B,EAAQzR,MAAM+P,KAIDxc,EAAW,CACxB,IAAM4D,EAAW5D,EAAUb,GACrBuL,EAAe9G,EAASpE,OAASmL,EACjC1I,EAASyI,GAAgB7K,EAAUuB,cAAgBwC,EAAS3B,OAC5DgC,EAAOL,EAASK,KAItB,GAHeL,EAASjC,QAGV,EAAG,OAAO+b,GAAQ,+BAGhC,IAAKhT,EAAc,CAEjB,GAAIzI,GAAU,EAAG,OAAOyb,GAAQ,qCAGhC,IAAKzZ,GAAQzD,MAAS+E,KAAKtB,GAAQ,EACjC,OAAOyZ,GAAQ,6BAInBQ,EAAQzR,KAAK9B,EAAW1I,IAGpBA,EAASkc,IAAWA,EAAYlc,GAChCA,EAASmc,IAAWA,EAAYnc,GAGtC,IAAMsc,GAAWJ,EAAYC,GAAa,EACtCrc,EAAM,EAUNG,EAAM,EAUJsc,IAbJzc,EAJG2a,GAIG5a,KAAKC,KAAK2a,GAAMyB,GAFhBrc,KAAK2c,MAAMN,EAAsB,GAAVI,KAY7Brc,EAJGsa,GAIG1a,KAAKI,KAAKsa,GAAM4B,GAFhBtc,KAAK2c,MAAML,EAAsB,GAAVG,KAKF,GAG7BL,EAAQzR,KAAKvK,GACbgc,EAAQzR,KAAK1K,GAEb4a,GAAQ5a,GACR0a,GAAQva,GAIR,IAFA,IAAIgX,EAAIhX,EAEDgX,EAAInX,GAETmc,EAAQzR,KAAK9B,EAAWuO,IACxBA,GAAKsF,EAIPN,EAAQQ,MAAK,SAACja,EAAGka,GAAJ,OAAUla,EAAIka,KAE3B,IAAMnW,EAAS,GAGTF,EAAS,IAAID,GAGnB,IAAK,IAAIlJ,KAAMa,EAAW,CACxB,IAAM4D,EAAW5D,EAAUb,GACvBwE,EACFC,EAAS/B,UAAY,IAAM+B,EAASpE,KAAO,IAAMoE,EAAS3B,OAExD2B,EAASpE,OAASmL,IACpBhH,EACEC,EAAS/B,UACT,IACA+B,EAASpE,KACT,KACAK,EAAUuB,cAGdoH,EAAOiE,KAAK,CACV4R,OAAQ,GACR1a,MACA+H,MAAOpD,EAAOsW,WACdC,UAAU,IASd,IAJA,IAAIC,EAAY/Y,IACZgZ,GAAahZ,IAGjB,MAAmBmY,EAAnB,eAA4B,CAAvB,IAAIjc,EAAM,KACT+c,EAAY,EACZC,EAAgB,EAEhB/F,EAAI,EACR,IAAK,IAAI/Z,KAAMa,EAAW,CACxB,IAAM4D,EAAW5D,EAAUb,GAGrB+f,EAAiBvU,EACrBA,EAAwB/G,EAAU3B,EAAQpC,IAItCqG,GAAY1F,MAAS+E,KAAK3B,EAASK,KAAM,SAAS,GAElDkb,EAAoBxU,EACxB/G,EAASpE,MACRyC,GACA2B,EAAS3B,QACTiE,GACArG,EAAUyB,UACVzB,EAAUwB,YAITuC,EAASpE,OAASmL,EAEpBsU,IAAkBC,EAGdtb,EAAS/B,YAAc8I,EAEzBsU,IACGE,EAAoBvb,EAASnC,OAASmC,EAASjC,OAElDsd,IACGrb,EAASnC,MAAQ0d,GAAqBvb,EAASjC,OAKlDud,EAAiBH,IAAWA,EAAYG,GAExCA,EAAiBJ,IAAWA,EAAYI,GAG5C1W,EAAO0Q,GAAGmF,OAAO5R,KAAK,CACpBzJ,EAAG2H,EAAW1I,GACdmd,EAAGzU,EAAWuU,KAIhBF,GAAarU,EAAWuU,GACxBhG,IAIFmF,EAAO5R,KAAK,CAAEzJ,EAAG2H,EAAW1I,GAASmd,EAAGzU,EAAWqU,KACnDV,EAAY7R,KAAK,CAAEzJ,EAAG2H,EAAW1I,GAASmd,EAAGzU,EAAWsU,KAG1D,IAAMnhB,EAAU,CAACgE,KAAK2c,MAAkB,IAAZK,GAAkBhd,KAAK2c,MAAkB,IAAZM,IAGnDM,EAAe,CACnBhB,SACA1a,IAAK,WACL+H,MAAO,QACPmT,UAAU,GAINS,EAAsB,CAC1BjB,OAAQC,EACR3a,IAAK,QACL+H,MAAO,OACPmT,UAAU,GAUZ,GAPArW,EAAOiE,KAAK6S,GAEZ9W,EAAOiE,KAAK4S,GAGZjD,EAAU,MAENU,GAAe,CACjB,IADiB,EACXzY,EAAM,GADK,cAGEmE,GAHF,IAGjB,2BAA2B,CAAC,IAAnB8M,EAAkB,QACnBiK,EAAa,CACjB7hB,KAAM,GACN8hB,SAAUlK,EAAOuJ,SACjBnT,MAAO4J,EAAO5J,MACd0I,KAAMkB,EAAO3R,KAEfU,EAAIoI,KAAK8S,GAPgB,oBAQPjK,EAAO+I,QARA,IAQzB,2BAAiC,CAAC,IAAzBoB,GAAwB,QAC/BF,EAAW7hB,KAAK+O,KAAK,EAAEgT,GAAMzc,GAAIyc,GAAML,KAThB,kCAHV,gCAgBjB,OAAO/B,GAAU,CACf/H,OAAQjR,EACR7F,MAAO,CACL8B,MAAO,CACLiY,KAAM,oBAGV5Z,MAAO,CACL2B,MAAO,CACLiY,KAAM,eAGVvE,MAAO,CACLxU,KAAM,UAERc,MAAO,CACLiY,KAAM,MAKZ7Y,EAAQ,CAAEhC,KAAM8K,EAAQ1K,aAG1BiL,qBAAU,YACO,uCAAG,4BAAAtE,EAAA,sEACEqZ,KAAM4B,IACtB1B,oDAAkDR,GAASmC,UAF7C,OACVtb,EADU,OAIhBc,QAAQxC,IAAI0B,EAAI3G,MAChBuC,EAASiB,EAAgBmD,EAAI3G,OALb,2CAAH,qDAOfkiB,KACC,IAGHlX,IAAgB,WAEd0T,EAAU,MACVnc,EtBtUK,CACLT,KAxC2B,oBsB8W3BE,EAAQ,MACR6c,EAAc,QACb,CAAC3c,IAGJ8I,IAAgB,WACdzI,EtB7UK,CACLT,KAxC2B,oBsBqX3Bqd,GAAkB,QAEjB,CAAChX,IAGJkD,qBAAU,WACRkV,OACC,CAACje,EAAW0c,GAAMF,GAAMM,KAG3B,IAAM+C,GAAe,uCAAG,WAAOpc,GAAP,iBAAAgB,EAAA,+EAEGqZ,KAAM4B,IAC3B,8DAAuDjc,EAAvD,WACEua,wBAJgB,gBAEZtgB,EAFY,EAEZA,KAIR6e,EAAc7e,GACduC,EAASiB,EAAwB,eAAgBxD,EAAKoiB,iBACtD7f,EAASiB,EAAwB,SAAUxD,EAAKqiB,OACvB,IAArBriB,EAAKA,KAAK+K,OACZmV,GnBjYwB,sCmBiYYtB,IAEpCA,EAAe,MACf0D,GAAevc,IAbG,kDAgBpBma,GnBtYyB,8CmBsYUtB,GAhBf,0DAAH,sDAoBf0D,GAAc,uCAAG,WAAOvc,GAAP,yBAAAgB,EAAA,6DACjBwb,EAAOne,KAAKoC,OAAO,IAAIQ,KAAS,KADf,kBAGIoZ,KAAM4B,IAC3B,wDAAiDjc,EAAjD,4CAA2Fwc,EAA3F,WACEjC,wBALe,OAanB,IAbmB,SAGXtgB,EAHW,EAGXA,KAKF+K,EAAS/K,EAAK0H,EAAEqD,OAEhBD,EAAS,GAGN0Q,EAAI,EAAGA,EAAIzQ,EAAQyQ,IAC1B1Q,EAAOiE,KAAK,CACE,IAAZ/O,EAAKgc,EAAER,GACPxb,EAAK4T,EAAE4H,GACPxb,EAAKwiB,EAAEhH,GACPxb,EAAKyiB,EAAEjH,GACPxb,EAAK0H,EAAE8T,KAGX/T,QAAQxC,IAAI6F,GACZqU,GAAkBrU,GAvBC,kDAyBnBoV,GAAa,KAAIxL,QAAUvS,EAAU4D,QAzBlB,0DAAH,sDA6Bd2c,GAAyB,SAACC,GAC9B,IAAIC,EnB5Ve,SAACC,EAAWF,GACjC,IAAIpc,EAAO,IAAIS,KAAK6b,EAAUC,WAE9B,OADAvc,EAAKwc,QAAQxc,EAAKiB,UAAYmb,GACvBpc,EmByVS0G,CAAa,IAAIjG,KAAQ2b,GACvCC,EAAU9f,IAAO8f,GAAS7f,OAAO,cACjCR,EtB5Z8B,SAACX,EAAUC,GAC3C,MAAO,CACLC,KArBgC,uBAsBhCF,WACAC,SsBwZS2B,CAA2B,OAAQof,IAC5C/C,GAAoB8C,IAGtB,OACE,oCACE,kBAAC1T,GAAgB+T,SAAjB,CAA0BnhB,MAAOA,IAC/B,kBAAC,GAAD,CACEsG,WAAYA,EACZ6J,YAAaA,EACbvG,MAAOA,IAET,kBAACwX,GAAA,EAAD,KACE,kBAAC/P,GAAA,EAAD,CAAMsC,WAAS,EAAC7J,QAAS,GACvB,kBAACuH,GAAA,EAAD,CAAMxG,MAAI,EAACyG,GAAI,IACS,gBAArBhR,EAAU4D,QAA4B,kBAAC,GAAD,OAEzC,kBAACmN,GAAA,EAAD,CAAMxG,MAAI,EAACyG,GAAI,IACb,kBAACD,GAAA,EAAD,CAAMsC,WAAS,GACZtT,GAAY,kBAAC,GAAD,CAAQ6Q,WAAYoP,KAChCxD,IAGL,kBAACzL,GAAA,EAAD,CAAMxG,MAAI,EAACyG,GAAI,IACb,kBAAC,GAAD,CACEhL,WAAYA,EACZ7F,UAAWA,EACX4gB,UAAW3C,MAGf,kBAACrN,GAAA,EAAD,CAAMxG,MAAI,EAACyG,GAAI,GACb,kBAACD,GAAA,EAAD,CAAMsC,WAAS,EAAC7J,QAAS,GACvB,kBAACuH,GAAA,EAAD,CAAMxG,MAAI,EAACyG,GAAI,IACb,kBAAC,EAAD,CAAWjR,SAAUA,KAEvB,kBAACgR,GAAA,EAAD,CAAMxG,MAAI,EAACyG,GAAI,IACb,kBAAC1Q,EAAA,EAAD,CAAMC,QAAQ,YACZ,kBAACM,EAAA,EAAD,KACE,kBAAC,GAAD,CACEwB,IAAK,EACLH,IAAK,IACLzB,MAAO,aACPf,OAAQ8B,EACR2R,SAAU,SAAC6N,GAAD,OACR5gB,EAASiB,EAAwB,aAAc2f,OAGnD,kBAAC,GAAD,CACE3e,KAAM,GACNH,IAAK,IACLzB,MAAO,WACPf,OAAQ+B,EACR0R,SAAU,SAAC6N,GAAD,OACR5gB,EAASiB,EAAwB,WAAY2f,QAG/CjhB,GACA,kBAAC,GAAD,CACEsC,IAAK,EACLH,IAAK,IACLzB,MAAO,qBACPf,MAAO+d,GACPtK,SAAU,SAAC6N,GAAD,OAAST,GAAuBS,OAG5CjhB,GACA,kBAAC,GAAD,CACEsC,IAAK,EACLH,IAAK,IACLzB,MAAO,aACPf,MAAO6B,EACP4R,SAAU,SAAC6N,GAAD,OACR5gB,EACEiB,EAAwB,eAAgB2f,YAU1D,kBAACjQ,GAAA,EAAD,CAAMxG,MAAI,EAACyG,GAAI,GACZsL,GAAkB,KACnB,kBAAChc,EAAA,EAAD,CAAMC,QAAQ,WAAWlB,UAAWyK,GAAQsS,QAC1C,kBAAC5b,EAAA,EAAD,CACEygB,OACE,oCACY,WAAT5D,GACC,kBAACpN,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEC,QACE,kBAACC,GAAA,EAAD,CACEC,SAAU4M,GACV9b,SAAU,kBACR+b,IAAiB,SAAC5M,GAAD,OAAWA,MAE9B9D,aAAW,sBAGfvL,MAAM,uBAGR,MAGRwR,OACE,oCACE,kBAAC7G,GAAA,EAAD,CACErL,QAAQ,WACRwL,UAAW,kBAAC,KAAD,CAAe6G,SAAS,UACnCvT,UAAWyK,GAAQuS,IACnBrQ,QAAS,kBAAMsR,GAAQ,YAJzB,UAQA,kBAAC1R,GAAA,EAAD,CACErL,QAAQ,WACRwL,UAAW,kBAAC,KAAD,CAAS6G,SAAS,UAC7BvT,UAAWyK,GAAQuS,IACnBrQ,QAAS,kBAAMsR,GAAQ,YAJzB,WAQEvd,GACA,kBAAC6L,GAAA,EAAD,CACErL,QAAQ,WACRwL,UAAW,kBAAC,KAAD,CAAU6G,SAAS,UAC9BvT,UAAWyK,GAAQuS,IACnBrQ,QAASgS,IAJX,oBAYR,kBAACnd,EAAA,EAAD,KACY,WAATwc,GACC,oCACE,kBAAC,GAAD,OAGF,oCACIJ,GAGA,kBAAC,GAAD,CAAWpf,KAAM0f,GAAQjU,MAAOA,IAFhC,kBAAC,EAAD,CAAQzL,KAAMA,IAIhB,kBAACkT,GAAA,EAAD,CAAMsC,WAAS,GACb,kBAACtC,GAAA,EAAD,CAAMxG,MAAI,EAACyG,GAAI,GACb,kBAAChQ,EAAA,EAAD,CACE1B,GAAG,kBACH2B,MAAM,MACNC,YAAY,OACZvB,KAAK,SACL0L,gBAAiB,CACfC,QAAQ,GAEV4V,OAAQ,SAAC9f,GAAD,OAAOwb,GAAQxb,EAAEE,OAAO5B,QAChCa,QAAQ,cAGZ,kBAACwQ,GAAA,EAAD,CAAMxG,MAAI,EAACyG,GAAI,IACf,kBAACD,GAAA,EAAD,CAAMxG,MAAI,EAACyG,GAAI,GACb,kBAAChQ,EAAA,EAAD,CACE1B,GAAG,kBACH2B,MAAM,OACNC,YAAY,OACZvB,KAAK,SACL0L,gBAAiB,CACfC,QAAQ,GAEV4V,OAAQ,SAAC9f,GAAD,OAAO0b,GAAQ1b,EAAEE,OAAO5B,QAChCa,QAAQ,mBASxB,kBAACwQ,GAAA,EAAD,CAAMxG,MAAI,EAACyG,GAAI,IACb,kBAAC1Q,EAAA,EAAD,CAAMC,QAAQ,YACZ,kBAACM,EAAA,EAAD,KACE,kBAACoP,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEC,QACE,kBAACC,GAAA,EAAD,CACEC,SAAU8M,GACVhc,SAAU,kBAAMic,IAAiB,SAAC9M,GAAD,OAAWA,MAC5C9D,aAAW,qBAGfvL,MAAO,uBAGV8b,IAAkB/W,EACjB,oCACGmX,GACC,kBAAC7D,GAAD,CACEf,SAAUwE,GACVnZ,OAAQ5D,EAAU4D,SAGpB,kBAAC,GAAD,CACE/F,KAAMkf,GACNnZ,OAAQ5D,EAAU4D,UAKxB,oCACGoC,GAAcjG,EACb,kBAAC4L,GAAA,EAAD,CAAYpL,QAAQ,MAApB,cAEA,qCACIR,GACA,oCACE,kBAAC4L,GAAA,EAAD,CAAYpL,QAAQ,MAApB,kDAapB,kBAAC,GAAD,U,SCxpBG4gB,GAAe,CAC1BhhB,UAAU,gBAAMyF,GAChB5F,UAAU,gBAAM2D,IAGZyd,GAAiB,SAAClhB,EAAOuS,GAC7B,MAAO,CAAEtS,UAAW,GAAIH,UAAU,gBAAME,EAAMF,aAG1CqhB,GAAiB,SAACnhB,EAAOuS,GAC7B,IAAMjF,EAAY,gBAAQtN,EAAMC,WAEhC,cADOqN,EAAaiF,EAAOxG,YACpB,CAAE9L,UAAWqN,EAAcxN,UAAU,gBAAME,EAAMF,aAGpDshB,GAAc,SAACphB,EAAOuS,GAAY,IAC9BjT,EAAiBiT,EAAO/F,YAAxBlN,aACFgO,EAAY,gBAAQtN,EAAMC,WAGhC,OAFAqN,EAAahO,GAAgBiT,EAAO/F,YACpC7I,EAAsB2J,EAActN,EAAMF,WACnC,CAAEG,UAAWqN,EAAcxN,UAAU,gBAAME,EAAMF,aAGpDT,GAAiB,SAACW,EAAOuS,GAC7B,IAAMjF,EAAY,gBAAQtN,EAAMC,WAGhC,OAFAqN,EAAaiF,EAAOjT,cAAciT,EAAOhT,UAAYgT,EAAO/S,MAC5DmE,EAAsB2J,EAActN,EAAMF,WACnC,CAAEG,UAAWqN,EAAcxN,UAAU,gBAAME,EAAMF,aAGpD4P,GAAe,SAAC1P,EAAOuS,GAE3B,OADA5O,EAAsB4O,EAAOjF,aAActN,EAAMF,WAC1C,CAAEG,UAAWsS,EAAOjF,aAAcxN,UAAU,gBAAME,EAAMF,aAG3DuhB,GAAe,SAACrhB,EAAOuS,GAC3B,IAAMjF,EAAY,gBAAQtN,EAAMC,WAEhC,OADA0D,EAAsB2J,EAActN,EAAMF,WACnC,CAAEG,UAAWqN,EAAcxN,UAAU,gBAAME,EAAMF,aAGpDJ,GAAkB,SAACM,EAAOuS,GAC9B,IAAM+O,EAAY,gBAAQthB,EAAMF,WAChCwhB,EAAa/O,EAAOhT,UAAYgT,EAAO/S,MACvC,IAAM8N,EAAY,gBAAQtN,EAAMC,WAEhC,OADA0D,EAAsB2J,EAAcgU,GAC7B,CACLrhB,UAAWqN,EACXxN,UAAWwhB,IAITC,GAAqB,SAACvhB,EAAOuS,GACjC,IAAMjF,EAAY,gBAAQtN,EAAMC,WAChC,IAAK,IAAI2D,KAAO0J,EAAc,CACXA,EAAa1J,GACrB2O,EAAOhT,UAAYgT,EAAO/S,MAGrC,OADAmE,EAAsB3D,EAAMC,UAAWD,EAAMF,WACtC,CAAEG,UAAWqN,EAAcxN,UAAU,gBAAME,EAAMF,aAGpDH,GAAU,SAACK,EAAOuS,GAAY,IAAD,EACAA,EAAO5U,KAAhCsC,EADyB,EACzBA,UAAWH,EADc,EACdA,UAEnB,OADA6D,EAAsB1D,EAAWH,GAC1B,CAAEG,UAAWA,EAAWH,UAAWA,ICtEtCmhB,GAAe,CACnBxT,KAAM,I,sCCOF+T,GAAcC,aAAgB,CAClCxhB,UFgEa,WAAmC,IAAlCD,EAAiC,uDAAzBihB,GAAc1O,EAAW,uCAC/C,OAAQA,EAAO9S,MAEb,IvB9EwB,euB+EtB,OAAO2hB,GAAYphB,EAAOuS,GAC5B,IvB9E2B,kBuB+EzB,OAAO2O,GAAelhB,GACxB,IvB/EyB,gBuBgFvB,OAAO0P,GAAa1P,EAAOuS,GAC7B,IvBnF2B,kBuBoFzB,OAAO4O,GAAenhB,EAAOuS,GAC/B,IvBjF2B,kBuBkFzB,OAAOlT,GAAeW,EAAOuS,GAC/B,IvBpFyB,gBuBqFvB,OAAO8O,GAAarhB,GACtB,IvBpFgC,uBuBqF9B,OAAOuhB,GAAmBvhB,EAAOuS,GAGnC,IvB7B6B,oBuB8B3B,OAAO7S,GAAgBM,EAAOuS,GAChC,IvBhCsB,auBiCpB,OAAO,6BAAKvS,GAAZ,IAAmBF,UAAU,gBAAM2D,KAErC,IvB5FoB,WuB6FlB,OAAO9D,GAAQK,EAAOuS,GACxB,QAEE,OAAOvS,IE3FXiI,aDNa,WAAmC,IAAZsK,EAAW,uCAC/C,OAAQA,EAAO9S,MACb,IdRoB,WcSlB,MAAO,CAAEgO,KAAM8E,EAAO9E,MACxB,QACE,OAAOwT,OCIPS,GAAQC,aAAYH,IAEpBI,GAAQ,WAAO,IAAD,EACgB/X,oBAAS,GADzB,mBACXgY,EADW,KACAC,EADA,KAEZC,EAAaF,EAAY,OAAS,QAElCzY,EAAQ4Y,aAAe,CAC3BC,QAAS,CACPxiB,KAAMsiB,KAQV,OACE,kBAAC,IAAMG,WAAP,KACE,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAUR,MAAOA,IACf,kBAACS,GAAA,EAAD,CAAe/Y,MAAOA,GACpB,kBAACuF,GAAA,EAAD,KACE,kBAAC,GAAD,CAAKgB,YAVS,WACxBmS,GAAcD,IASiCzY,MAAO2Y,UAS1DK,IAASC,OAAO,kBAAC,GAAD,MAAWC,SAASC,eAAe,W","file":"static/js/main.827a765a.chunk.js","sourcesContent":["import React from \"react\";\nimport * as d3 from \"d3\";\nimport * as nv from \"nvd3\";\n\nconst Payoff = ({ data }) => {\n  // Clear the Charts\n  d3.selectAll(\"nvd3chart\").remove();\n\n  const drawChart = ({ data: myData, Ydomain }) => {\n    /*These lines are all chart setup.  Pick and choose which chart features you want to utilize. */\n    nv.addGraph(() => {\n      const newChart = nv.models\n        .lineChart()\n        .margin({ left: 100 }) //Adjust chart margins to give the x-axis some breathing room.\n        .useInteractiveGuideline(false) //We want nice looking tooltips and a guideline!\n        // .duration(1500) //how fast do you want the lines to transition? Was removed, caused wrong data points positions after doing a transition bug https://github.com/novus/nvd3/issues/2018\n        .showLegend(true) //Show the legend, allowing users to turn on/off line series.\n        .showYAxis(true) //Show the y-axis\n        .showXAxis(true); //Show the x-axis\n\n      newChart.xAxis //Chart x-axis settings\n        .axisLabel(\"Price ($)\")\n        .tickFormat(d3.format(\",.2f\"));\n\n      newChart.yAxis //Chart y-axis settings\n        .axisLabel(\"Profit ($)\")\n        .tickFormat(d3.format(\",.2f\"));\n\n      newChart.forceY(Ydomain);\n\n      d3.select(\"#chart svg\") //Select the <svg> element you want to render the chart in.\n        .datum(myData) //Populate the <svg> element with chart data...\n        .call(newChart); //Finally, render the chart!\n\n      // Update the chart when window resizes.\n      nv.utils.windowResize(newChart.update);\n\n      return newChart;\n    });\n  };\n\n  data && drawChart(data);\n  return (\n    <>\n      <div className=\"panel-body\">\n        <div id=\"chart\">\n          <svg id=\"nvd3chart\"></svg>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Payoff;\n","export const ADD_CONTRACT = \"ADD_CONTRACT\";\nexport const REMOVE_CONTRACT = \"REMOVE_CONTRACT\";\nexport const RESET_PORTFOLIO = \"RESET_PORTFOLIO\";\nexport const SET_PORTFOLIO = \"SET_PORTFOLIO\";\nexport const UPDATE_PRICES = \"UPDATE_PRICES\";\nexport const UPDATE_CONTRACT = \"UPDATE_CONTRACT\";\nexport const UPDATE_ALL_CONTRACTS = \"UPDATE_ALL_CONTRACTS\";\nexport const SET_DATA = \"SET_DATA\";\n\nexport const addContract = (newContract) => {\n  return {\n    type: ADD_CONTRACT,\n    newContract,\n  };\n};\n\nexport const updateContract = (contractName, property, value) => {\n  return {\n    type: UPDATE_CONTRACT,\n    property,\n    value,\n    contractName,\n  };\n};\n\nexport const updateAllContracts = (property, value) => {\n  return {\n    type: UPDATE_ALL_CONTRACTS,\n    property,\n    value,\n  };\n};\n\nexport const removeContract = (contractId) => {\n  return {\n    type: REMOVE_CONTRACT,\n    contractId,\n  };\n};\n\nexport const resetPortfolio = () => {\n  return {\n    type: RESET_PORTFOLIO,\n  };\n};\n\nexport const setPortfolio = (newPortfolio) => {\n  return {\n    type: SET_PORTFOLIO,\n    newPortfolio,\n  };\n};\n\nexport const updatePrices = () => {\n  return {\n    type: UPDATE_PRICES,\n  };\n};\n\n// Stock Data\nexport const UPDATE_PRICE = \"UPDATE_PRICE\";\nexport const UPDATE_VOLATILITY = \"UPDATE_VOLATILITY\";\nexport const UPDATE_INTEREST = \"UPDATE_INTEREST\";\nexport const UPDATE_TICKER = \"UPDATE_TICKER\";\nexport const RESET_DATA = \"RESET_DATA\";\nexport const UPDATE_STOCK_DATA = \"UPDATE_STOCK_DATA\";\n\nexport const updateStockData = (property, value) => {\n  return {\n    type: UPDATE_STOCK_DATA,\n    property,\n    value,\n  };\n};\n\nexport const resetData = () => {\n  return {\n    type: RESET_DATA,\n  };\n};\n\n\n// Both StockData and Portfolio\n\nexport const setData = (data) => {\n  return {\n    type: SET_DATA,\n    data,\n  };\n};","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../store/actions/portfolio\";\nimport {\n  Card,\n  CardContent,\n  TextField,\n  InputLabel,\n  CardHeader,\n} from \"@material-ui/core\";\nimport moment from \"moment\";\n\nconst StockData = ({ liveMode }) => {\n  const { stockData } = useSelector((state) => state.portfolio);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Card variant=\"outlined\">\n        <CardHeader\n          title=\"Stock Data\"\n          subheader={moment().format(\"MM-DD-YYYY\")}\n        ></CardHeader>\n        <CardContent>\n          <InputLabel htmlFor=\"current-price\">\n            Current Stock Price ($)\n          </InputLabel>\n          <TextField\n            id=\"current-price\"\n            label=\"Current Price\"\n            variant=\"filled\"\n            type=\"number\"\n            placeholder=\"Current Price\"\n            onChange={(e) => {\n              dispatch(actions.updateStockData(\"currentPrice\", e.target.value));\n            }}\n            value={stockData.currentPrice}\n          ></TextField>\n          <InputLabel htmlFor=\"current-price\">Volatility (%)</InputLabel>\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Volatility\"\n            variant=\"filled\"\n            type=\"number\"\n            placeholder=\"Volatility\"\n            onChange={(e) =>\n              dispatch(actions.updateStockData(\"volatility\", e.target.value))\n            }\n            value={stockData.volatility}\n          ></TextField>\n          <InputLabel htmlFor=\"current-price\">Interest Rate(%)</InputLabel>\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Interest\"\n            variant=\"filled\"\n            type=\"number\"\n            placeholder=\"Interest\"\n            onChange={(e) =>\n              dispatch(actions.updateStockData(\"interest\", e.target.value))\n            }\n            value={stockData.interest}\n          ></TextField>\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n\nexport default StockData;\n","import * as cts from \"./constants\";\n\n/**\n * Evaluates a Payoff Function\n *\n * @param {Option} option An option Object\n * @param {Number} price A given stock price\n * @param {Object} stockData StockData object containing the stock currentPrice\n * @returns {Number} The value of the option/stock\n */\n\n// Takes in option object and evaluates the payoff given the input price\nexport const evaluatePayoffFunc = (option, price, stockData) => {\n  const cost = option.price * option.amount;\n  if (option.type === cts.CALL) {\n    // A call Option\n    if (option.direction === cts.BUY) {\n      // Long Call\n      return (\n        Math.max(price - parseInt(option.strike), 0) * option.amount - cost\n      );\n    }\n    // Short Call\n    return Math.min(0, option.strike - price) * option.amount + cost;\n  } else if (option.type === cts.PUT) {\n    // A Put Option\n    if (option.direction === cts.BUY) {\n      // Long Put\n      return (\n        Math.max(parseInt(option.strike) - price, 0) * option.amount - cost\n      );\n    }\n    // Short Put\n    return Math.min(0, price - option.strike) * option.amount + cost;\n  } else if (option.type === cts.CASH) {\n    // Stock\n    if (option.direction === cts.BUY) {\n      // Long Stock\n      return (price - stockData.currentPrice) * option.amount;\n    }\n    // Short Stock\n    return (stockData.currentPrice - price) * option.amount;\n  }\n};\n\n/**\n * Calculates Stock Price Based On BS model\n *\n * @param {String} optionType The type of option - cts.CALL or cts.PUT\n * @param {Number} S Current Stock price\n * @param {Number} X Exercise Price\n * @param {Number} T Time remaining to the expiration Date (in years)\n * @param {Number} r Short-term risk free interest rate\n * @param {Number} v Standard deviation of stock price (implied volatility)\n * @returns {Number} The Price of the option\n */\n\nexport function BlackScholes(optionType, S, X, T, r, v) {\n  // Unit adjustments\n  v = v / 100;\n  r = r / 100;\n  var d1 = (Math.log(S / X) + (r + (v * v) / 2) * T) / (v * Math.sqrt(T));\n  var d2 = d1 - v * Math.sqrt(T);\n  if (optionType === cts.CALL) {\n    return cts.round(S * CND(d1) - X * Math.exp(-r * T) * CND(d2));\n  } else {\n    return cts.round(X * Math.exp(-r * T) * CND(-d2) - S * CND(-d1));\n  }\n}\n\n/* The cumulative Normal distribution function: */\nfunction CND(x) {\n  if (x < 0) {\n    return 1 - CND(-x);\n  } else {\n    let k = 1 / (1 + 0.2316419 * x);\n    return (\n      1 -\n      (Math.exp((-x * x) / 2) / Math.sqrt(2 * Math.PI)) *\n        k *\n        (0.31938153 +\n          k *\n            (-0.356563782 +\n              k * (1.781477937 + k * (-1.821255978 + k * 1.330274429))))\n    );\n  }\n}\n","import moment from \"moment\";\nimport { BlackScholes } from \"./options\";\n\nexport const BUY = \"Buy\";\nexport const SELL = \"Sell\";\nexport const CALL = \"Call\";\nexport const PUT = \"Put\";\nexport const CASH = \"Cash\";\n\n// Some Error Message variables\nexport const STOCK_NO_OPTIONS = \"This Stock Has No Available Options\";\nexport const STOCK_ERR_FETCH = \"Unable To Fetch Stock Data, Try again Later\";\n\n// Initial Stock Data State\nexport const stockDataInitialState = {\n  ticker: \"Theoretical\",\n  currentPrice: 100,\n  volatility: 30,\n  interest: 2,\n};\n\nexport const updatePortfolioPrices = (portfolio, stockData) => {\n  for (let key in portfolio) {\n    const contract = portfolio[key];\n    if (contract.type === CASH) {\n      contract.price = stockData.currentPrice;\n    } else {\n      contract.price = getPrice(contract, stockData);\n    }\n    contract.debitCredit =\n      contract.direction === SELL ? contract.price : -contract.price;\n  }\n};\n\nconst getPrice = (contract, stockData) => {\n  const timeDiff = dateDiffInYears(contract.date);\n  return round(\n    BlackScholes(\n      contract.type,\n      stockData.currentPrice,\n      contract.strike,\n      timeDiff,\n      stockData.interest,\n      stockData.volatility\n    )\n  );\n};\n\n/**\n * Round a number to a given number of digits\n *\n * @param {Number | String} num The number to round\n * @param {Number | null} n The number of significant digits, defaults to 2\n * @returns {Number} The rounded number\n */\n\n// Round a Number\nexport const round = (num, n = 2) => {\n  // If it is a string convert it to num\n  if (typeof num === \"string\") {\n    num = +num;\n  }\n  let res = num.toFixed(n);\n  return +res;\n};\n\n/**\n * Converts a UNIX Timestamp to Date String in the format: YYYY-MM-DD\n *\n * @param {Number} UNIX_timestamp A unix timestamp\n * @returns {String} Date String in the format: YYYY-MM-DD\n */\n\nexport const UNIXToDateString = (UNIX_timestamp) => {\n  const a = new Date(UNIX_timestamp * 1000);\n  return moment(a).format(\"YYYY-MM-DD\");\n};\n\n/**\n * Adds a number of days to a given date object\n *\n * @param {Date} dayObject A Date Object\n * @param {Number} days The number of days to be added\n * @returns {Date} Date Object after adding the days\n */\n\n// Function that adds num days to a date object\nexport const addDays = (dayObject, days) => {\n  var date = new Date(dayObject.valueOf());\n  date.setDate(date.getDate() + days);\n  return date;\n};\n\n/**\n * Creates a Date String of Format YYYY-MM-DD after N years from the present\n *\n * @param {Number} n The number of years to be added\n * @returns {Date} Date Object after adding the years\n */\n\n// Create a Date 1 year from now, used as default date on contract\nconst createDateNYearsFromNow = (n) => {\n  var d = new Date();\n  var year = d.getFullYear();\n  var month = d.getMonth();\n  var day = d.getDate();\n  console.log(year);\n  var c = new Date(year + n, month, day);\n  return moment(c).format(\"YYYY-MM-DD\");\n};\n\n/**\n * Gets the difference between two dates in years\n *\n * @param {Date} futureDate The Future Date\n * @param {Date} currentDate The Past Date, defaults to the present Date\n * @returns {Date} Date Object after adding the years\n */\n\nexport const dateDiffInYears = (futureDate, currentDate = new Date()) => {\n  return -moment(currentDate).diff(futureDate, \"years\", true);\n};\n\n// Create the initialPortfolio\n\n// Date used in initial portfolio\nexport const date = createDateNYearsFromNow(1);\n\nconst initialPortfolioId = {\n  amount: 1,\n  contractName: \"initialPortfolioId\",\n  date,\n  direction: BUY,\n  strike: 100,\n  type: CALL,\n};\n\nconst price = getPrice(initialPortfolioId, stockDataInitialState);\n\ninitialPortfolioId.price = price;\n\ninitialPortfolioId.debitCredit = price;\n\n// The initial Theoretical Option Portfolio\nexport const initialPortfolio = {\n  initialPortfolioId,\n};\n\n/* Function that takes in currentPrice, impliedVolatility and a number representing\nThe desired deviation from the current price. Used when calculating strikes on option\nstrategies */\nexport const getRelativeStrike = (\n  currentPrice,\n  impliedVol,\n  N,\n  optionData,\n  type,\n  interest\n) => {\n  let strike =\n    round(currentPrice) + round(currentPrice) * round(impliedVol / 100) * N;\n\n  if (!optionData) {\n    const dateDiff = dateDiffInYears(date);\n    const price = BlackScholes(\n      type,\n      currentPrice,\n      strike,\n      dateDiff,\n      interest,\n      impliedVol\n    );\n    return { strike, date, price };\n  }\n  // Adjust According to OptionData\n\n  /*\n    Steps:\n    1. Find Find a date that is the closest to one year from now given optionData\n    2. Given the date, find a strike that is closest to the relative strike that \n    was calculated previously.\n  */\n\n  // Find a date that is the closest to one year from now given optionData\n  const targetDate = createDateNYearsFromNow(1);\n  let min = Infinity;\n  let actualDate = null;\n\n  for (let key in optionData.data) {\n    const { expirationDate } = optionData.data[key];\n    // Take Math abs so that we get a number in the future\n    const dateDiff = Math.abs(dateDiffInYears(expirationDate, targetDate));\n    if (dateDiff < min) {\n      min = dateDiff;\n      actualDate = expirationDate;\n    }\n  }\n\n  let finalStrike = strike;\n  // For each of the option contracts with the given exp Date find the one closest\n  // To the calculated strike price\n  for (let key in optionData.data) {\n    const { options, expirationDate } = optionData.data[key];\n    if (expirationDate === actualDate) {\n      let minDiffStrike = Infinity;\n      for (let option of options[type.toUpperCase()]) {\n        if (Math.abs(option.strike - strike) < minDiffStrike) {\n          minDiffStrike = Math.abs(option.strike - strike);\n          finalStrike = option.strike;\n        }\n      }\n    }\n  }\n\n  const dateDiff = dateDiffInYears(actualDate);\n  const price = round(\n    BlackScholes(\n      type,\n      currentPrice,\n      finalStrike,\n      dateDiff,\n      interest,\n      impliedVol\n    )\n  );\n\n  return { strike: finalStrike, date: actualDate, price };\n};\n\n// Return a long condor strategy option portfolio, given the currentprice, volatility\n// and live option data.\nexport const getLongCondor = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -1,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: thirdStrike,\n    date: thirdDate,\n    price: thirdPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: fourthStrike,\n    date: fourthDate,\n    price: fourthPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    1,\n    optionData,\n    CALL,\n    interest\n  );\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: BUY,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: SELL,\n      price: secondPrice,\n      strike: secondStrike,\n      type: CALL,\n    },\n    thirdId: {\n      amount: 1,\n      contractName: \"thirdId\",\n      date: thirdDate,\n      direction: SELL,\n      price: thirdPrice,\n      strike: thirdStrike,\n      type: CALL,\n    },\n    fourthId: {\n      amount: 1,\n      contractName: \"fourthId\",\n      date: fourthDate,\n      direction: BUY,\n      price: fourthPrice,\n      strike: fourthStrike,\n      type: CALL,\n    },\n  };\n};\n\nexport const LONG_CONDOR = \"LONG_CONDOR\";\n\nexport const getShortCondor = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    1,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: thirdStrike,\n    date: thirdDate,\n    price: thirdPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -0.5,\n    optionData,\n    PUT,\n    interest\n  );\n\n  const {\n    strike: fourthStrike,\n    date: fourthDate,\n    price: fourthPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -1,\n    optionData,\n    PUT,\n    interest\n  );\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: BUY,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: SELL,\n      price: secondPrice,\n      strike: secondStrike,\n      type: CALL,\n    },\n    thirdId: {\n      amount: 1,\n      contractName: \"thirdId\",\n      date: thirdDate,\n      direction: BUY,\n      price: thirdPrice,\n      strike: thirdStrike,\n      type: PUT,\n    },\n    fourthId: {\n      amount: 1,\n      contractName: \"fourthId\",\n      date: fourthDate,\n      direction: SELL,\n      price: fourthPrice,\n      strike: fourthStrike,\n      type: PUT,\n    },\n  };\n};\n\nexport const SHORT_CONDOR = \"SHORT_CONDOR\";\n\nexport const getBullCallSpread = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: BUY,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: SELL,\n      price: secondPrice,\n      strike: secondStrike,\n      type: CALL,\n    },\n  };\n};\n\nexport const BULL_CALL_SPREAD = \"BULL_CALL_SPREAD\";\n\nexport const getBearPutSpread = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(currentPrice, impliedVol, 0, optionData, PUT, interest);\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -0.5,\n    optionData,\n    PUT,\n    interest\n  );\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: BUY,\n      price: firstPrice,\n      strike: firstStrike,\n      type: PUT,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: SELL,\n      price: secondPrice,\n      strike: secondStrike,\n      type: PUT,\n    },\n  };\n};\n\nexport const BEAR_PUT_SPREAD = \"BEAR_PUT_SPREAD\";\n\nexport const getLongStraddle = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(currentPrice, impliedVol, 0, optionData, PUT, interest);\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: BUY,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: BUY,\n      price: secondPrice,\n      strike: secondStrike,\n      type: PUT,\n    },\n  };\n};\n\nexport const LONG_STRADDLE = \"LONG_STRADDLE\";\n\nexport const getShortStraddle = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(currentPrice, impliedVol, 0, optionData, PUT, interest);\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: SELL,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: SELL,\n      price: secondPrice,\n      strike: secondStrike,\n      type: PUT,\n    },\n  };\n};\n\nexport const SHORT_STRADDLE = \"SHORT_STRADDLE\";\n\nexport const getLongStrangle = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -0.5,\n    optionData,\n    PUT,\n    interest\n  );\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: BUY,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: BUY,\n      price: secondPrice,\n      strike: secondStrike,\n      type: PUT,\n    },\n  };\n};\n\nexport const LONG_STRANGLE = \"LONG_STRANGLE\";\n\nexport const getShortStrangle = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -0.5,\n    optionData,\n    PUT,\n    interest\n  );\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: SELL,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: SELL,\n      price: secondPrice,\n      strike: secondStrike,\n      type: PUT,\n    },\n  };\n};\n\nexport const SHORT_STRANGLE = \"SHORT_STRANGLE\";\n\nexport const getLongButterfly = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.0,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: thirdStrike,\n    date: thirdDate,\n    price: thirdPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: BUY,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 2,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: SELL,\n      price: secondPrice,\n      strike: secondStrike,\n      type: CALL,\n    },\n    thirdId: {\n      amount: 1,\n      contractName: \"thirdId\",\n      date: thirdDate,\n      direction: BUY,\n      price: thirdPrice,\n      strike: thirdStrike,\n      type: CALL,\n    },\n  };\n};\n\nexport const LONG_BUTTERFLY = \"LONG_BUTTERFLY\";\n\nexport const getShortButterfly = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.0,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: thirdStrike,\n    date: thirdDate,\n    price: thirdPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.0,\n    optionData,\n    PUT,\n    interest\n  );\n\n  const {\n    strike: fourthStrike,\n    date: fourthDate,\n    price: fourthPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -0.5,\n    optionData,\n    PUT,\n    interest\n  );\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: BUY,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: SELL,\n      price: secondPrice,\n      strike: secondStrike,\n      type: CALL,\n    },\n    thirdId: {\n      amount: 1,\n      contractName: \"thirdId\",\n      date: thirdDate,\n      direction: BUY,\n      price: thirdPrice,\n      strike: thirdStrike,\n      type: PUT,\n    },\n    fourthId: {\n      amount: 1,\n      contractName: \"fourthId\",\n      date: fourthDate,\n      direction: SELL,\n      price: fourthPrice,\n      strike: fourthStrike,\n      type: PUT,\n    },\n  };\n};\n\nexport const SHORT_BUTTERFLY = \"SHORT_BUTTERFLY\";\n\nconst strategyInfo = {};\n\nstrategyInfo[\n  LONG_CONDOR\n] = `The Long Condor can be viewed as a variation of the Long Butterfly options strategy, the difference being that the strikes of the 'wings' of the strategy are different.\n   This widens the price range at which the strategy is profitable (and thus increases the probability of being profitable), but the maximum profit becomes lower, while the maximum loss increases.`;\n\nstrategyInfo[\n  SHORT_CONDOR\n] = `The Short Condor can be viewed as a variation of the Short Butterfly options strategy, with the legs of the strategy using different strikes instead of a single one.\n  \n  The strategy is constructed using options with 4 different strikes, and can be designed in a number of ways (using only calls, only puts, or both) and be either a debit or credit strategy.`;\n\nstrategyInfo[\n  BULL_CALL_SPREAD\n] = `The Bull Call Spread is an options strategy involving the purchase of a Call with a lower strike and the selling of a Call with a higher strike.\n\nThe motivation of the strategy is to generate a profit if the stock rises, but make the strategy cheaper than simply buying a call option. However, the Profit / Loss of a Bull Call Spread is limited (whereas the one of a plain call is unlimited).`;\n\nstrategyInfo[\n  BEAR_PUT_SPREAD\n] = `The Bear Put Spread is an options strategy that involves the purchase of a Put Option with a higher strike and the selling of another Put Option with a lower strike.\n\nThe sold put makes the strategy cheaper (compared to the purchase of a single put), while still allowing the investor to get a profit if the stock price decreases.\n\nThe disadvantage of a Bear Put Spread (compared to a simple Long Put position) is that the P/L of the strategy is limited.`;\n\nstrategyInfo[\n  LONG_STRADDLE\n] = `The Long Straddle is an options strategy involving the purchase of a Call and a Put option with the same strike.\n\nThe strategy generates a profit if the stock price rises or drops considerably.`;\n\nstrategyInfo[\n  SHORT_STRADDLE\n] = `The Short Straddle is an options strategy involving the simultaneous selling of a Call and a Put with the same strike.\n\nThe investor receives the premium from the sold options, and hopes that the stock price will end at the strike level (or not too far from it) on the expiry date.\n\nThe profit of a Short Straddle is limited to the premium received, whereas its loss is unlimited.`;\n\nstrategyInfo[\n  LONG_STRANGLE\n] = `The Long Strangle is an options strategy resembling the Long Straddle, the only difference being that the strike of the options are different: an investor is buying a Call with a higher strike and a Put with a lower strike.\n\nThe strategy generates a profit in case the stock price rises or falls significantly by the expiry date.\n\nThe Strangle is cheaper than the Straddle.`;\n\nstrategyInfo[\n  SHORT_STRANGLE\n] = `The Short Strangle is an options strategy similar to the Short Straddle, with one difference: the strikes of the sold options are different (you sell a Call with a higher strike and a Put with a lower strike)\n\nThe strategy will generate a profit if the stock price stays between the two strikes by the expiry date.\n\nCompared to the Short Straddle, the Short Stangle has a lower profit, but higher probability of being profitable.`;\n\nstrategyInfo[\n  LONG_BUTTERFLY\n] = `The Long Butterfly is an options strategy that consists of options with 3 different strikes being sold and purchased at the same time.\n\nThe strategy can be considered as an improved version of the Short Straddle, the improvement being that the maximum loss becomes limited and thus under full control.\n\nThe Long Butterfly can be constructed in a number of ways (using only calls, using only puts, or using both), and the resulting strategies differ primarily in being either credit or debit ones.\n\nBelow you can see an example of a debit Long Butterfly made of Call options.`;\n\nstrategyInfo[\n  SHORT_BUTTERFLY\n] = `The Short Butterfly is an options strategy that can be considered as an improved version of a Long Straddle, the improvement being that the maximum loss becomes lower – unfortunately, at the expense of limiting the profit of the strategy.\n\nIt is constructed using options with 3 different strikes.`;\n\nexport { strategyInfo };\n","import * as cts from \"./constants\";\n\n// Option definition class\nexport default class Option {\n  constructor(contractName) {\n    this.contractName = new Date().toISOString().replace(\".\", \"|\"); // Replace because of mongoose error\n    this.strike = 100;\n    this.date = cts.date;\n    this.direction = cts.BUY;\n    this.type = cts.CALL;\n    this.amount = 1;\n    this.debitCredit = 0;\n  }\n}\n","// Color Picker Structure to help select color on graph\nexport default class ColorPicker {\n    // Available colors, more can be added\n    colors = [\n        \"blue\",\n        \"red\",\n        \"yellow\",\n        \"purple\",\n        \"orange\",\n        \"black\",\n    ]\n\n    constructor() {\n        this.index = 0;\n    }\n\n    // Get the Next Color\n    getColor(){\n        const result =  this.colors[this.index];\n        // Adjust the index;\n        if(this.index >= this.colors.length){\n            // We have reached the end reset to zero\n            this.index = 0;\n        }else{\n            // Not at end just add one to index\n            this.index++;\n        }\n        return result;\n    }\n}","/**\n * A custom useEffect hook that only triggers on updates, not on initial mount\n * Idea stolen from: https://stackoverflow.com/a/55075818/1526448\n * @param {Function} effect\n * @param {Array<any>} dependencies\n */\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useUpdateEffect(effect, dependencies = []) {\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      effect();\n    }\n  }, dependencies);\n}\n","import React, { useEffect, useState } from \"react\";\nimport Option from \"../utility/Option\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as util from \"../utility\";\nimport useUpdateEffect from \"../hooks/useUpdateEffect\";\nimport * as actions from \"../store/actions/portfolio\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport { Table, TableCell, TableContainer } from \"@material-ui/core\";\nimport { TableRow, TableHead, makeStyles } from \"@material-ui/core\";\nimport { FormControl, InputLabel, Select } from \"@material-ui/core\";\nimport { MenuItem, TextField, TableBody, Button } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\n// TODO: make contract component lean by outsorcing logic to redux\nconst Contract = (props) => {\n  const { data, optionData } = props;\n  const classes = useStyles();\n\n  /*\n   If optionData is defined then the strike prices must adjust to the\n   Expiration date\n   */\n\n  // Default state values are when a strategy is selected in live mode\n  const [expirationDates, setExpirationDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(data.date);\n  const [strikePrices, setStrikePrices] = useState([[data.strike]]);\n\n  const dispatch = useDispatch();\n\n  // Set expiration Dates when component mounts\n  useEffect(() => {\n    if (optionData) {\n      const expirationDates = optionData.data.map(\n        (item) => item.expirationDate\n      );\n      setExpirationDates(expirationDates);\n    }\n  }, []);\n\n  // Update strike and price at change\n  useUpdateEffect(() => {\n    if (optionData) {\n      // Find the element with same date\n      const apiContract = optionData.data.find(\n        (item) => item.expirationDate === selectedDate\n      );\n\n      if (!apiContract) return;\n\n      // Find the type of option this is\n      const type = data.type.toUpperCase();\n\n      // Extract the contracts given the date\n      const contractsAtDate = apiContract.options[type];\n\n      // Find the contract with the selected Strike\n      const contract = contractsAtDate.find(\n        (item) => +item.strike === +data.strike\n      );\n\n      // Set the price depending if we are short or long\n      if (data.direction === \"Buy\") {\n        dispatch(\n          actions.updateContract(data.contractName, \"price\", contract.ask)\n        );\n      } else {\n        dispatch(\n          actions.updateContract(data.contractName, \"price\", contract.bid)\n        );\n      }\n    }\n  }, [data.strike]);\n\n  useUpdateEffect(() => {\n    if (optionData) {\n      // Find the element with same date\n      const apiContract = optionData.data.find(\n        (item) => item.expirationDate === selectedDate\n      );\n\n      // If none found return\n      if (!apiContract) return;\n\n      // Find the type of option this is\n      const type = data.type.toUpperCase();\n\n      // Extract the contracts given the date\n      const contractsAtDate = apiContract.options[type];\n\n      // Make an array of strikes at the current date\n      const strikesAtDate = contractsAtDate.map((item) => item.strike);\n\n      // Update strikeprices\n      setStrikePrices(strikesAtDate);\n    }\n  }, [selectedDate]);\n\n  const cashContract = data.type === util.CASH;\n\n  return (\n    <TableRow>\n      {/* Direction: Fully Using Redux */}\n      <TableCell>\n        <FormControl variant=\"outlined\" className={classes.formControl}>\n          <InputLabel id=\"demo-simple-select-outlined-label\">\n            Direction\n          </InputLabel>\n          <Select\n            labelId=\"demo-simple-select-outlined-label\"\n            id=\"demo-simple-select-outlined\"\n            value={data.direction}\n            onChange={(e) =>\n              dispatch(\n                actions.updateContract(\n                  data.contractName,\n                  \"direction\",\n                  e.target.value\n                )\n              )\n            }\n            label=\"Direction\"\n          >\n            <MenuItem value={util.BUY}>Buy</MenuItem>\n            <MenuItem value={util.SELL}>Sell</MenuItem>\n          </Select>\n        </FormControl>\n      </TableCell>\n      {/* Amount: Fully Using Redux */}\n      <TableCell>\n        <TextField\n          id=\"outlined-number\"\n          label=\"Amount\"\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          onChange={(e) =>\n            dispatch(\n              actions.updateContract(\n                data.contractName,\n                \"amount\",\n                e.target.value\n              )\n            )\n          }\n          value={data.amount}\n          variant=\"outlined\"\n        />\n      </TableCell>\n      {/* Kind: Fully Using Redux*/}\n      <TableCell>\n        <FormControl variant=\"outlined\" className={classes.formControl}>\n          <InputLabel id=\"demo-simple-select-outlined-label\">Kind</InputLabel>\n          <Select\n            labelId=\"demo-simple-select-outlined-label\"\n            id=\"demo-simple-select-outlined\"\n            value={data.type}\n            onChange={(e) =>\n              dispatch(\n                actions.updateContract(\n                  data.contractName,\n                  \"type\",\n                  e.target.value\n                )\n              )\n            }\n            label=\"Kind\"\n          >\n            <MenuItem value={util.CALL}>Call</MenuItem>\n            <MenuItem value={util.PUT}>Put</MenuItem>\n            <MenuItem value={util.CASH}>Cash</MenuItem>\n          </Select>\n        </FormControl>\n      </TableCell>\n      {/* Strike Price: TODO UPDATE REDUX */}\n      <TableCell>\n        {!cashContract ? (\n          optionData ? (\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n              <InputLabel id=\"demo-simple-select-outlined-label\">\n                Strike\n              </InputLabel>\n              <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                value={data.strike}\n                onChange={(e) =>\n                  dispatch(\n                    actions.updateContract(\n                      data.contractName,\n                      \"strike\",\n                      e.target.value\n                    )\n                  )\n                }\n                label=\"Kind\"\n              >\n                {strikePrices.map((price) => (\n                  <MenuItem value={price}>\n                    {isNaN(price) ? null : price}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          ) : (\n            <TextField\n              id=\"outlined-number\"\n              label=\"Strike\"\n              type=\"number\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              onChange={(e) =>\n                dispatch(\n                  actions.updateContract(\n                    data.contractName,\n                    \"strike\",\n                    e.target.value\n                  )\n                )\n              }\n              value={data.strike}\n              variant=\"outlined\"\n            />\n          )\n        ) : null}\n      </TableCell>\n      {/* Expiry Date */}\n      <TableCell>\n        {!cashContract &&\n          (!optionData ? (\n            <TextField\n              id=\"date\"\n              label=\"Expiry\"\n              type=\"date\"\n              value={data.date}\n              className={classes.textField}\n              onChange={(e) =>\n                dispatch(\n                  actions.updateContract(\n                    data.contractName,\n                    \"date\",\n                    e.target.value\n                  )\n                )\n              }\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n          ) : (\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n              <InputLabel id=\"demo-simple-select-outlined-label\">\n                Expiry\n              </InputLabel>\n              <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                onChange={(e) => setSelectedDate(e.target.value)}\n                value={selectedDate}\n                label=\"Expiry\"\n              >\n                {expirationDates.map((date) => (\n                  <MenuItem value={date}>{date}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          ))}\n      </TableCell>\n      {/* Premium/Price */}\n      <TableCell style={{ verticalAlign: \"middle\" }}>\n        <Typography variant=\"h6\">\n          <b>{data.price * data.amount}</b>\n        </Typography>\n      </TableCell>\n      {/* Debit/Credit: TODO add as property in Option Obj, updated in */}\n      <TableCell style={{ verticalAlign: \"middle\" }}>\n        <Typography variant=\"h6\">\n          <b>{data.debitCredit * data.amount} </b>\n        </Typography>\n      </TableCell>\n      {/* Remove Button */}\n      <TableCell style={{ verticalAlign: \"middle\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          className={classes.button}\n          startIcon={<DeleteIcon />}\n          onClick={() => dispatch(actions.removeContract(data.contractName))}\n        >\n          Remove\n        </Button>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nconst Panel = (props) => {\n  const { optionData } = props; // removed portfolio\n  const { portfolio, stockData } = useSelector((state) => state.portfolio);\n  const dispatch = useDispatch();\n\n  const renderContracts = () => {\n    const result = [];\n    for (let id in portfolio) {\n      result.push(\n        <Contract optionData={optionData} data={portfolio[id]} key={id} />\n      );\n    }\n    return result;\n  };\n\n  const calculateTotal = () => {\n    let premium = 0;\n    let debitcredit = 0;\n    let amount = 0;\n\n    for (let key in portfolio) {\n      const contract = portfolio[key];\n      premium += +contract.price * +contract.amount;\n      const debitToAdd =\n        contract.direction === util.SELL ? +contract.price : -+contract.price;\n      debitcredit += debitToAdd * +contract.amount;\n      amount += +contract.amount;\n    }\n    return {\n      premium: premium.toFixed(2),\n      debitcredit: debitcredit.toFixed(2),\n      amount,\n    };\n  };\n\n  const { premium, debitcredit, amount } = calculateTotal();\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent>\n        <TableContainer>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>\n                  <Typography variant=\"h5\">Direction</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"h5\">Amount</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"h5\">Kind</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"h5\">Strike</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"h5\">Expiry</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"h5\">Premium</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"h5\">Debit/Credit</Typography>\n                </TableCell>\n                <TableCell>\n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() =>\n                      dispatch(actions.addContract(new Option(), stockData))\n                    }\n                  >\n                    Add Leg\n                  </Button>\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {renderContracts()}\n              <TableRow>\n                <TableCell>\n                  <Typography variant=\"h6\">Total</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"h6\">{amount}</Typography>\n                </TableCell>\n                <TableCell></TableCell>\n                <TableCell></TableCell>\n                <TableCell></TableCell>\n                <TableCell>\n                  <Typography variant=\"h6\">{premium}</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"h6\">{debitcredit}</Typography>\n                </TableCell>\n                <TableCell>\n                  <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    startIcon={<DeleteIcon />}\n                    onClick={() => dispatch(actions.resetPortfolio())}\n                  >\n                    Remove All\n                  </Button>\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Panel;\n","import React from \"react\";\n\nconst defaultValue = {\n  liveMode: false,\n  setLiveMode: () => {},\n};\n\nexport const liveDataContext = React.createContext(defaultValue);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport * as util from \"../../utility\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"../../store/actions/portfolio\";\nimport * as strategyActions from \"../../store/actions/strategy-info\";\n\nconst DropDownBtn = ({ optionData }) => {\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const { stockData } = useSelector((state) => state.portfolio);\n  const { currentPrice, volatility, interest } = stockData;\n  const dispatch = useDispatch();\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event, newPortfolio, ct) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    if (newPortfolio) {\n      dispatch(\n        actions.setPortfolio(\n          newPortfolio(currentPrice, volatility, optionData, interest)\n        )\n      );\n      dispatch(strategyActions.setInfo(ct));\n    }\n\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      setOpen(false);\n    }\n  }\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n\n  return (\n    <div>\n      <Button\n        ref={anchorRef}\n        aria-controls={open ? \"menu-list-grow\" : undefined}\n        aria-haspopup=\"true\"\n        onClick={handleToggle}\n        color=\"inherit\"\n      >\n        View Sample Strategies\n      </Button>\n      <Popper\n        open={open}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n      >\n        {({ TransitionProps, placement }) => (\n          <Grow\n            {...TransitionProps}\n            style={{\n              transformOrigin:\n                placement === \"bottom\" ? \"center top\" : \"center bottom\",\n            }}\n          >\n            <Paper>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList\n                  autoFocusItem={open}\n                  id=\"menu-list-grow\"\n                  onKeyDown={handleListKeyDown}\n                >\n                  <MenuItem\n                    onClick={(e) =>\n                      handleClose(\n                        e,\n                        util.getBullCallSpread,\n                        util.BULL_CALL_SPREAD\n                      )\n                    }\n                  >\n                    Bull Call Spread\n                  </MenuItem>\n                  <MenuItem\n                    onClick={(e) =>\n                      handleClose(\n                        e,\n                        util.getBearPutSpread,\n                        util.BEAR_PUT_SPREAD\n                      )\n                    }\n                  >\n                    Bear Put Spread\n                  </MenuItem>\n                  <MenuItem\n                    onClick={(e) =>\n                      handleClose(e, util.getLongStraddle, util.LONG_STRADDLE)\n                    }\n                  >\n                    Long Straddle\n                  </MenuItem>\n                  <MenuItem\n                    onClick={(e) =>\n                      handleClose(e, util.getShortStraddle, util.SHORT_STRADDLE)\n                    }\n                  >\n                    Short Straddle\n                  </MenuItem>\n                  <MenuItem\n                    onClick={(e) =>\n                      handleClose(e, util.getLongButterfly, util.LONG_BUTTERFLY)\n                    }\n                  >\n                    Long Butterfly\n                  </MenuItem>\n                  <MenuItem\n                    onClick={(e) =>\n                      handleClose(\n                        e,\n                        util.getShortButterfly,\n                        util.SHORT_BUTTERFLY\n                      )\n                    }\n                  >\n                    Short Butterfly\n                  </MenuItem>\n                  <MenuItem\n                    onClick={(e) =>\n                      handleClose(e, util.getLongCondor, util.LONG_CONDOR)\n                    }\n                  >\n                    Long Condor\n                  </MenuItem>\n                  <MenuItem\n                    onClick={(e) =>\n                      handleClose(e, util.getShortCondor, util.SHORT_CONDOR)\n                    }\n                  >\n                    Short Condor\n                  </MenuItem>\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>\n        )}\n      </Popper>\n    </div>\n  );\n};\nexport default DropDownBtn;\n","export const SET_INFO = \"SET_INFO\";\n\nexport const setInfo = (info) => {\n  return {\n    type: SET_INFO,\n    info,\n  };\n};\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { liveDataContext } from \"../../context/liveData\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport DropDownBtn from \"./DropDownBtn\";\nimport { useDispatch } from \"react-redux\";\nimport * as actions from \"../../store/actions/portfolio\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport { IconButton } from \"@material-ui/core\";\nimport Brightness7Icon from \"@material-ui/icons/Brightness7\";\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  navbar: {\n    marginBottom: \"40px\",\n    position: \"relative\",\n    zIndex: \"10\",\n  },\n}));\n\nexport default function MenuAppBar({\n  setPortfolio,\n  optionData,\n  changeTheme,\n  theme,\n}) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { liveMode, setLiveMode } = useContext(liveDataContext);\n\n  return (\n    <AppBar position=\"static\" className={classes.navbar}>\n      <Toolbar>\n        <Typography variant=\"h3\" className={classes.title}>\n          Option Strategy Builder\n        </Typography>\n\n        <div onClick={changeTheme}>\n          {theme === \"dark\" ? <Brightness4Icon /> : <Brightness7Icon />}\n        </div>\n        <DropDownBtn setPortfolio={setPortfolio} optionData={optionData} />\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={liveMode}\n                onChange={() =>\n                  setLiveMode((prev) => {\n                    if (prev === true) dispatch(actions.resetData());\n                    return !prev;\n                  })\n                }\n                aria-label=\"live mode switch\"\n              />\n            }\n            label={\"Live Data Mode\"}\n          />\n        </FormGroup>\n        <IconButton\n          aria-label=\"delete\"\n          color=\"secondary\"\n          href=\"https://github.com/luisalfonsopreciado/finance-visualizer\"\n          target=\"_blank\"\n        >\n          <GitHubIcon color=\"action\" />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport symbols from \"../symbols.json\";\nimport { Button } from \"@material-ui/core\";\nimport { makeStyles, Grid } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  item: {\n    // No Effect\n    height: \"100%\",\n    widht: \"100%\",\n  },\n});\n\nconst Search = ({ searchFunc }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const classes = useStyles();\n\n  const filterOptions = (options, state) => {\n    // Extract the inputValue\n    const query = state.inputValue.toUpperCase();\n    // Update state\n    setInputValue(query);\n    // If short query return nothing (improves performance)\n    if (query.length <= 1) return [];\n\n    // Filter out the options\n    return options.filter((o) => o.displaySymbol.includes(query));\n  };\n\n  return (\n    <>\n      <Grid item md={11}>\n        {/* A Warning message is outputed in console: Fix later */}\n        <Autocomplete\n          id=\"combo-box-demo\"\n          color=\"primary\"\n          options={symbols}\n          getOptionLabel={(option) =>\n            option.displaySymbol + \": \" + option.description\n          }\n          filterOptions={(options, state) => filterOptions(options, state)}\n          className={classes.item}\n          onChange={(event, value) =>\n            value && setInputValue(value.displaySymbol)\n          }\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"Search Ticker\"\n              variant=\"outlined\"\n              color=\"primary\"\n            />\n          )}\n          noOptionsText={\n            inputValue.length <= 1 ? \"Type a Ticker Symbol\" : \"No Symbols Found\"\n          }\n        />\n      </Grid>\n      <Grid item md={1}>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() => searchFunc(inputValue)}\n          className={classes.item}\n        >\n          Submit\n        </Button>\n      </Grid>\n    </>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\nimport { Snackbar, IconButton} from \"@material-ui/core\";\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst Error = (props) => {\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    props.removeFunc();\n  };\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: \"top\",\n        horizontal: \"left\",\n      }}\n      open={true}\n      autoHideDuration={6000}\n      onClose={handleClose}\n      message={props.children}\n      action={\n        <React.Fragment>\n          <IconButton\n            size=\"small\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            onClick={handleClose}\n          >\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        </React.Fragment>\n      }\n    />\n  );\n};\nexport default Error;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Card } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport { Typography } from \"@material-ui/core\";\n\nconst SecurityInfo = () => {\n  const { stockData } = useSelector((state) => state.portfolio);\n\n  return (\n    <Card variant=\"outlined\">\n      <Card.Body>\n        <Typography variant=\"h1\">{stockData.ticker}</Typography>\n        <Typography variant=\"h5\">Quote: {stockData.currentPrice}$</Typography>\n        <Typography variant=\"h6\">{moment(new Date()).format(\"YYYY-MM-DD\")}</Typography>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default SecurityInfo;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport TrendingUpIcon from \"@material-ui/icons/TrendingUp\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250,\n  },\n  input: {\n    width: 42,\n  },\n  slider: { width: \"90%\" },\n});\n\nexport default function InputSlider({ value, setValue, title, min, max }) {\n  const classes = useStyles();\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography id=\"input-slider\" gutterBottom>\n        {title}\n      </Typography>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item>\n          <TrendingUpIcon />\n        </Grid>\n        <Grid item xs>\n          <Slider\n            min={min}\n            max={max}\n            value={typeof value === \"number\" ? value : 0}\n            onChange={handleSliderChange}\n            aria-labelledby=\"input-slider\"\n            className={classes.slider}\n          />\n        </Grid>\n        <Grid item></Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport AnyChart from \"anychart-react\";\nimport * as anychart from \"anychart\";\nimport * as util from \"../utility\";\n\nconst StockAnyChart = ({ data, ticker }) => {\n  const newData = [];\n  data.forEach((pnt) => {\n    newData.push([\n      util.UNIXToDateString(pnt[0] / 1000), // Divide by 1000 to convert to UNIX seconds\n      pnt[1],\n      pnt[2],\n      pnt[3],\n      pnt[4],\n    ]);\n  });\n  // Create the chart\n  var stockDataTable = anychart.data.table();\n  // Add The data\n  stockDataTable.addData(newData);\n  // Declare stock Chart\n  var chart = anychart.stock();\n  // Create plot\n  var firstPlot = chart.plot(0);\n  firstPlot.area(stockDataTable.mapAs({ value: 4 })).name(ticker);\n  chart.scroller().area(stockDataTable.mapAs({ value: 4 }));\n  chart.selectRange(\"2018-01-03\", \"2019-01-01\");\n\n  return (\n    <>\n      {!chart ? (\n        <h1>Unable to Display Data</h1>\n      ) : (\n        <AnyChart width=\"100%\" height={300} instance={chart} title={ticker} />\n      )}\n    </>\n  );\n};\n\nexport default StockAnyChart;\n","import React from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nHighcharts.theme = {\n  colors: [\n    \"#2b908f\",\n    \"#90ee7e\",\n    \"#f45b5b\",\n    \"#7798BF\",\n    \"#aaeeee\",\n    \"#ff0066\",\n    \"#eeaaee\",\n    \"#55BF3B\",\n    \"#DF5353\",\n    \"#7798BF\",\n    \"#aaeeee\",\n  ],\n  chart: {\n    backgroundColor: 'transparent',\n    style: {\n      fontFamily: \"'Unica One', sans-serif\",\n    },\n    plotBorderColor: \"#606063\",\n  },\n  title: {\n    style: {\n      color: \"black\",\n      textTransform: \"uppercase\",\n      fontSize: \"20px\",\n    },\n  },\n  subtitle: {\n    style: {\n      color: \"black\",\n      textTransform: \"uppercase\",\n    },\n  },\n  xAxis: {\n    gridLineColor: \"black\",\n    labels: {\n      style: {\n        color: \"black\",\n      },\n    },\n    lineColor: \"black\",\n    minorGridLineColor: \"#505053\",\n    tickColor: \"black\",\n    title: {\n      style: {\n        color: \"black\",\n      },\n    },\n  },\n  yAxis: {\n    gridLineColor: \"black\",\n    labels: {\n      style: {\n        color: \"black\",\n      },\n    },\n    lineColor: \"black\",\n    minorGridLineColor: \"#505053\",\n    tickColor: \"black\",\n    tickWidth: 1,\n    title: {\n      style: {\n        color: \"black\",\n      },\n    },\n  },\n  tooltip: {\n    backgroundColor: \"rgba(0, 0, 0, 0.85)\",\n    style: {\n      color: \"#F0F0F0\",\n    },\n  },\n  plotOptions: {\n    series: {\n      dataLabels: {\n        color: \"black\",\n        style: {\n          fontSize: \"13px\",\n        },\n      },\n      marker: {\n        lineColor: \"#333\",\n      },\n    },\n    boxplot: {\n      fillColor: \"#505053\",\n    },\n    candlestick: {\n      lineColor: \"white\",\n    },\n    errorbar: {\n      color: \"white\",\n    },\n  },\n  legend: {\n    backgroundColor: \"transparent\",\n    itemStyle: {\n      color: \"black\",\n    },\n    itemHoverStyle: {\n      color: \"grey\",\n    },\n    itemHiddenStyle: {\n      color: \"#606063\",\n    },\n    title: {\n      style: {\n        color: \"#C0C0C0\",\n      },\n    },\n  },\n  credits: {\n    style: {\n      color: \"#666\",\n    },\n  },\n  labels: {\n    style: {\n      color: \"black\",\n    },\n  },\n  drilldown: {\n    activeAxisLabelStyle: {\n      color: \"black\",\n    },\n    activeDataLabelStyle: {\n      color: \"black\",\n    },\n  },\n  navigation: {\n    buttonOptions: {\n      symbolStroke: \"#DDDDDD\",\n      theme: {\n        fill: \"#505053\",\n      },\n    },\n  },\n  // scroll charts\n  rangeSelector: {\n    buttonTheme: {\n      fill: \"#505053\",\n      stroke: \"#000000\",\n      style: {\n        color: \"#CCC\",\n      },\n      states: {\n        hover: {\n          fill: \"black\",\n          stroke: \"#000000\",\n          style: {\n            color: \"white\",\n          },\n        },\n        select: {\n          fill: \"#000003\",\n          stroke: \"#000000\",\n          style: {\n            color: \"white\",\n          },\n        },\n      },\n    },\n    inputBoxBorderColor: \"#505053\",\n    inputStyle: {\n      backgroundColor: \"#333\",\n      color: \"silver\",\n    },\n    labelStyle: {\n      color: \"silver\",\n    },\n  },\n  navigator: {\n    handles: {\n      backgroundColor: \"#666\",\n      borderColor: \"#AAA\",\n    },\n    outlineColor: \"#CCC\",\n    maskFill: \"rgba(255,255,255,0.1)\",\n    series: {\n      color: \"#7798BF\",\n      lineColor: \"#A6C7ED\",\n    },\n    xAxis: {\n      gridLineColor: \"#505053\",\n    },\n  },\n  scrollbar: {\n    barBackgroundColor: \"#808083\",\n    barBorderColor: \"#808083\",\n    buttonArrowColor: \"#CCC\",\n    buttonBackgroundColor: \"#606063\",\n    buttonBorderColor: \"#606063\",\n    rifleColor: \"#FFF\",\n    trackBackgroundColor: \"#404043\",\n    trackBorderColor: \"#404043\",\n  },\n};\n\nconst PayoffHighChart = ({ data, theme }) => {\n  Highcharts.setOptions(Highcharts.theme);\n\n  return <HighchartsReact highcharts={Highcharts} options={data} />;\n};\n\nexport default PayoffHighChart;\n","import React from \"react\";\nimport HighStock from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nfunction App({ mockData, ticker }) {\n  let groupingUnits = [\n    [\n      \"week\", // unit name\n      [1], // allowed multiples\n    ],\n    [\"month\", [1, 2, 3, 4, 6]],\n  ];\n\n  let mockOptions = {\n    rangeSelector: {\n      selected: 1,\n    },\n\n    title: {\n      text: ticker + \" Historical\",\n    },\n\n    yAxis: [\n      {\n        labels: {\n          align: \"right\",\n          x: -3,\n        },\n        title: {\n          text: \"OHLC\",\n        },\n        height: \"60%\",\n        lineWidth: 2,\n        resize: {\n          enabled: true,\n        },\n      },\n      {\n        labels: {\n          align: \"right\",\n          x: -3,\n        },\n        title: {\n          text: \"Volume\",\n        },\n        top: \"65%\",\n        height: \"35%\",\n        offset: 0,\n        lineWidth: 2,\n      },\n    ],\n\n    tooltip: {\n      split: true,\n    },\n\n    series: [\n      {\n        type: \"candlestick\",\n        data: mockData,\n        dataGrouping: {\n          units: groupingUnits,\n        },\n      },\n      {\n        type: \"column\",\n        data: (function () {\n          var columnData = [];\n\n          for (var i = 0; i < mockData.length; i++) {\n            columnData.push([\n              mockData[i][0], // the date\n              mockData[i][5], // the volume\n            ]);\n          }\n          return columnData;\n        })(),\n        yAxis: 1,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"App\">\n      {\n        <HighchartsReact\n          highcharts={HighStock}\n          constructorType={\"stockChart\"}\n          options={mockOptions}\n        />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import bs from \"black-scholes\";\nimport * as cts from \"./constants\";\n\n/**\n * Standard normal density export function.\n *\n * @private\n * @param {Number} x The value to calculate the standard normal density of\n * @returns {Number} The value of the standard normal density export function at x\n */\nexport function _stdNormDensity(x) {\n  return Math.pow(Math.E, (-1 * Math.pow(x, 2)) / 2) / Math.sqrt(2 * Math.PI);\n}\n\n/**\n * Calculates the delta of an option.\n *\n * @param {Number} s Current price of the underlying\n * @param {Number} k Strike price\n * @param {Number} t Time to experiation in years\n * @param {Number} v Volatility as a decimal\n * @param {Number} r Anual risk-free interest rate as a decimal\n * @param {Object} contract The contract object\n * @returns {Number} The delta of the option\n */\nexport function getDelta(s, k, t, v, r, contract) {\n  if (contract.type === cts.CASH) {\n    if(contract.direction === cts.SELL){\n      return -1;\n    }\n    return 1;\n  } else if (contract.type === cts.CALL) {\n    return _callDelta(s, k, t, v, r);\n  } // put\n  else if (contract.type === cts.PUT) {\n    return _putDelta(s, k, t, v, r);\n  }\n  // Default\n  return -1;\n}\n\n/**\n * Calculates the delta of a call option.\n *\n * @private\n * @param {Number} s Current price of the underlying\n * @param {Number} k Strike price\n * @param {Number} t Time to experiation in years\n * @param {Number} v Volatility as a decimal\n * @param {Number} r Anual risk-free interest rate as a decimal\n * @returns {Number} The delta of the call option\n */\nexport function _callDelta(s, k, t, v, r) {\n  var w = bs.getW(s, k, t, v, r);\n  var delta = null;\n  if (!isFinite(w)) {\n    delta = s > k ? 1 : 0;\n  } else {\n    delta = bs.stdNormCDF(w);\n  }\n  return delta;\n}\n\n/**\n * Calculates the delta of a put option.\n *\n * @private\n * @param {Number} s Current price of the underlying\n * @param {Number} k Strike price\n * @param {Number} t Time to experiation in years\n * @param {Number} v Volatility as a decimal\n * @param {Number} r Anual risk-free interest rate as a decimal\n * @returns {Number} The delta of the put option\n */\nexport function _putDelta(s, k, t, v, r) {\n  var delta = _callDelta(s, k, t, v, r) - 1;\n  return delta === -1 && k === s ? 0 : delta;\n}\n\n/**\n * Calculates the rho of an option.\n *\n * @param {Number} s Current price of the underlying\n * @param {Number} k Strike price\n * @param {Number} t Time to experiation in years\n * @param {Number} v Volatility as a decimal\n * @param {Number} r Anual risk-free interest rate as a decimal\n * @param {Object} contract The contract object\n * @param {String} [scale=100] The value to scale rho by (100=100BPS=1%, 10000=1BPS=.01%)\n * @returns {Number} The rho of the option\n */\nexport function getRho(s, k, t, v, r, contract, scale) {\n  scale = scale || 100;\n  if (contract.type === cts.CASH) return 0;\n  if (contract.type === cts.CALL) {\n    return _callRho(s, k, t, v, r) / scale;\n  } // put\n  else if (contract.type === cts.PUT) {\n    return _putRho(s, k, t, v, r) / scale;\n  }\n  return 0;\n}\n\n/**\n * Calculates the rho of a call option.\n *\n * @private\n * @param {Number} s Current price of the underlying\n * @param {Number} k Strike price\n * @param {Number} t Time to experiation in years\n * @param {Number} v Volatility as a decimal\n * @param {Number} r Anual risk-free interest rate as a decimal\n * @returns {Number} The rho of the call option\n */\nexport function _callRho(s, k, t, v, r) {\n  var w = bs.getW(s, k, t, v, r);\n  if (!isNaN(w)) {\n    return (\n      k * t * Math.pow(Math.E, -1 * r * t) * bs.stdNormCDF(w - v * Math.sqrt(t))\n    );\n  } else {\n    return 0;\n  }\n}\n\n/**\n * Calculates the rho of a put option.\n *\n * @private\n * @param {Number} s Current price of the underlying\n * @param {Number} k Strike price\n * @param {Number} t Time to experiation in years\n * @param {Number} v Volatility as a decimal\n * @param {Number} r Anual risk-free interest rate as a decimal\n * @returns {Number} The rho of the put option\n */\nexport function _putRho(s, k, t, v, r) {\n  var w = bs.getW(s, k, t, v, r);\n  if (!isNaN(w)) {\n    return (\n      -1 *\n      k *\n      t *\n      Math.pow(Math.E, -1 * r * t) *\n      bs.stdNormCDF(v * Math.sqrt(t) - w)\n    );\n  } else {\n    return 0;\n  }\n}\n\n/**\n * Calculates the vega of a call and put option.\n *\n * @param {Number} s Current price of the underlying\n * @param {Number} k Strike price\n * @param {Number} t Time to experiation in years\n * @param {Number} v Volatility as a decimal\n * @param {Number} r Anual risk-free interest rate as a decimal\n * @param {Object} contract The contract object\n * @returns {Number} The vega of the option\n */\nexport function getVega(s, k, t, v, r, contract) {\n  if (contract.type === cts.CASH) {\n    return 0;\n  }\n  var w = bs.getW(s, k, t, v, r);\n  return isFinite(w) ? (s * Math.sqrt(t) * _stdNormDensity(w)) / 100 : 0;\n}\n\n/**\n * Calculates the theta of an option.\n *\n * @param {Number} s Current price of the underlying\n * @param {Number} k Strike price\n * @param {Number} t Time to experiation in years\n * @param {Number} v Volatility as a decimal\n * @param {Number} r Anual risk-free interest rate as a decimal\n * @param {Object} contract The contract object\n * @param {String} [scale=365] The number of days to scale theta by - usually 365 or 252\n * @returns {Number} The theta of the option\n */\nexport function getTheta(s, k, t, v, r, contract, scale) {\n  scale = scale || 365;\n  if (contract.type === cts.CASH) return 0;\n  if (contract.type === cts.CALL) {\n    return _callTheta(s, k, t, v, r) / scale;\n  } // put\n  else if (contract.type === cts.PUT) {\n    return _putTheta(s, k, t, v, r) / scale;\n  }\n  return 0;\n}\n\n/**\n * Calculates the theta of a call option.\n *\n * @private\n * @param {Number} s Current price of the underlying\n * @param {Number} k Strike price\n * @param {Number} t Time to experiation in years\n * @param {Number} v Volatility as a decimal\n * @param {Number} r Anual risk-free interest rate as a decimal\n * @returns {Number} The theta of the call option\n */\nexport function _callTheta(s, k, t, v, r) {\n  var w = bs.getW(s, k, t, v, r);\n  if (isFinite(w)) {\n    return (\n      (-1 * v * s * _stdNormDensity(w)) / (2 * Math.sqrt(t)) -\n      k * r * Math.pow(Math.E, -1 * r * t) * bs.stdNormCDF(w - v * Math.sqrt(t))\n    );\n  } else {\n    return 0;\n  }\n}\n\n/**\n * Calculates the theta of a put option.\n *\n * @private\n * @param {Number} s Current price of the underlying\n * @param {Number} k Strike price\n * @param {Number} t Time to experiation in years\n * @param {Number} v Volatility as a decimal\n * @param {Number} r Anual risk-free interest rate as a decimal\n * @returns {Number} The theta of the put option\n */\nexport function _putTheta(s, k, t, v, r) {\n  var w = bs.getW(s, k, t, v, r);\n  if (isFinite(w)) {\n    return (\n      (-1 * v * s * _stdNormDensity(w)) / (2 * Math.sqrt(t)) +\n      k * r * Math.pow(Math.E, -1 * r * t) * bs.stdNormCDF(v * Math.sqrt(t) - w)\n    );\n  } else {\n    return 0;\n  }\n}\n\n/**\n * Calculates the gamma of a call and put option.\n *\n * @param {Number} s Current price of the underlying\n * @param {Number} k Strike price\n * @param {Number} t Time to experiation in years\n * @param {Number} v Volatility as a decimal\n * @param {Number} r Anual risk-free interest rate as a decimal\n * @param {Object} contract Contract object\n * @returns {Number} The gamma of the option\n */\nexport function getGamma(s, k, t, v, r, contract) {\n  if (contract.type === cts.CASH) return 0;\n  var w = bs.getW(s, k, t, v, r);\n  return isFinite(w) ? _stdNormDensity(w) / (s * v * Math.sqrt(t)) : 0;\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { useSelector } from \"react-redux\";\nimport * as greeks from \"../utility/greeks\";\nimport * as util from \"../utility/constants\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nexport default function SimpleTable() {\n  const classes = useStyles();\n  const { portfolio, stockData } = useSelector((state) => state.portfolio);\n  const keys = Object.keys(portfolio);\n\n  const portfolioStats = {\n    amount: 0,\n    IV: 0,\n    delta: 0,\n    gamma: 0,\n    rho: 0,\n    theta: 0,\n    vega: 0,\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Position</TableCell>\n            <TableCell>Amount</TableCell>\n            <TableCell align=\"right\">IV</TableCell>\n            <TableCell align=\"right\">Delta</TableCell>\n            <TableCell align=\"right\">Gamma</TableCell>\n            <TableCell align=\"right\">Rho</TableCell>\n            <TableCell align=\"right\">Theta</TableCell>\n            <TableCell align=\"right\">Vega</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {keys.map((key) => {\n            const contract = portfolio[key];\n            console.log(\n              stockData.currentPrice,\n              contract.strike,\n              util.dateDiffInYears(contract.date),\n              stockData.volatility / 100,\n              stockData.interest / 100,\n              contract\n            );\n\n            console.log(contract)\n\n            // Calculate greeks\n            const contractDelta =\n              contract.amount *\n              greeks.getDelta(\n                stockData.currentPrice,\n                contract.strike,\n                util.dateDiffInYears(contract.date),\n                stockData.volatility / 100,\n                stockData.interest / 100,\n                contract\n              ) *\n              100;\n\n            const contractGamma =\n              contract.amount *\n              greeks.getGamma(\n                stockData.currentPrice,\n                contract.strike,\n                util.dateDiffInYears(contract.date),\n                stockData.volatility / 100,\n                stockData.interest / 100,\n                contract\n              ) *\n              100;\n\n            const contractRho =\n              contract.amount *\n              greeks.getRho(\n                stockData.currentPrice,\n                contract.strike,\n                util.dateDiffInYears(contract.date),\n                stockData.volatility / 100,\n                stockData.interest / 100,\n                contract\n              ) *\n              100;\n\n            const contractTheta =\n              contract.amount *\n              greeks.getTheta(\n                stockData.currentPrice,\n                contract.strike,\n                util.dateDiffInYears(contract.date),\n                stockData.volatility / 100,\n                stockData.interest / 100,\n                contract\n              ) *\n              100;\n\n            const contractVega =\n              contract.amount *\n              greeks.getVega(\n                stockData.currentPrice,\n                contract.strike,\n                util.dateDiffInYears(contract.date),\n                stockData.volatility / 100,\n                stockData.interest / 100,\n                contract\n              ) *\n              100;\n\n            // Add greeks to portfolio total\n            portfolioStats.IV += stockData.interest;\n            portfolioStats.amount += contract.amount;\n            portfolioStats.delta += contractDelta;\n            portfolioStats.gamma += contractGamma;\n            portfolioStats.rho += contractRho;\n            portfolioStats.theta += contractTheta;\n            portfolioStats.vega += contractVega;\n\n            return (\n              <TableRow key={key}>\n                {/* Position */}\n                <TableCell component=\"th\" scope=\"row\">\n                  {contract.direction +\n                    \" \" +\n                    contract.type +\n                    \"  \" +\n                    stockData.currentPrice}\n                </TableCell>\n                {/* Amount */}\n                <TableCell component=\"th\" scope=\"row\">\n                  {contract.amount}\n                </TableCell>\n                {/* Interest Rate */}\n                <TableCell align=\"right\">{stockData.interest + \"%\"}</TableCell>\n                {/* Delta*/}\n                <TableCell align=\"right\">{contractDelta.toFixed(1)}</TableCell>\n                {/* Gamma */}\n                <TableCell align=\"right\">{contractGamma.toFixed(1)}</TableCell>\n                {/* Rho*/}\n                <TableCell align=\"right\">{contractRho.toFixed(1)}</TableCell>\n                {/* Theta */}\n                <TableCell align=\"right\">{contractTheta.toFixed(1)}</TableCell>\n                {/* Vega */}\n                <TableCell align=\"right\">{contractVega.toFixed(1)}</TableCell>\n              </TableRow>\n            );\n          })}\n          <TableRow key=\"Total\">\n            {/* Position */}\n            <TableCell component=\"th\" scope=\"row\">\n              Total\n            </TableCell>\n            {/* Amount */}\n            <TableCell component=\"th\" scope=\"row\">\n              {portfolioStats.amount}\n            </TableCell>\n            {/* Interest Rate */}\n            <TableCell align=\"right\">{stockData.interest + \"%\"}</TableCell>\n            {/* Delta*/}\n            <TableCell align=\"right\">{portfolioStats.delta.toFixed(1)}</TableCell>\n            {/* Gamma */}\n            <TableCell align=\"right\">{portfolioStats.gamma.toFixed(1)}</TableCell>\n            {/* Rho*/}\n            <TableCell align=\"right\">{portfolioStats.rho.toFixed(1)}</TableCell>\n            {/* Theta */}\n            <TableCell align=\"right\">{portfolioStats.theta.toFixed(1)}</TableCell>\n            {/* Vega */}\n            <TableCell align=\"right\">{portfolioStats.vega.toFixed(1)}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { useSelector } from \"react-redux\";\nimport useUpdateEffect from \"../hooks/useUpdateEffect\";\nimport * as cts from \"../utility/constants\";\n\nconst useStyles = makeStyles((theme) => ({\n  close: {\n    padding: theme.spacing(0.5),\n  },\n}));\n\nexport default function ConsecutiveSnackbars() {\n  const info = useSelector((state) => state.strategyInfo);\n  const [open, setOpen] = useState(false);\n  const [messageInfo, setMessageInfo] = React.useState(info.info);\n\n  useUpdateEffect(() => {\n    setMessageInfo(info.info);\n    setOpen(true);\n  }, [info.info]);\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const handleExited = () => {\n    setMessageInfo(undefined);\n  };\n\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Snackbar\n        key={messageInfo ? messageInfo.key : undefined}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"left\",\n        }}\n        open={open}\n        onClose={handleClose}\n        onExited={handleExited}\n        message={cts.strategyInfo[messageInfo]}\n        action={\n          <React.Fragment>\n            <IconButton\n              aria-label=\"close\"\n              color=\"inherit\"\n              className={classes.close}\n              onClick={handleClose}\n            >\n              <CloseIcon />\n            </IconButton>\n          </React.Fragment>\n        }\n      />\n    </div>\n  );\n}\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport Payoff from \"./components/Payoff\";\nimport StockData from \"./components/StockData\";\nimport Panel from \"./components/Panel\";\nimport * as util from \"./utility\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport moment from \"moment\";\nimport { liveDataContext } from \"./context/liveData\";\nimport Search from \"./components/Search\";\nimport axios from \"axios\";\nimport ColorPicker from \"./utility/DS/ColorPicker\";\nimport * as actions from \"./store/actions/portfolio\";\nimport useUpdateEffect from \"./hooks/useUpdateEffect\";\nimport Error from \"./components/Error/Error\";\nimport SecurityInfo from \"./components/SecurityInfo\";\nimport Slider from \"./components/Slider\";\nimport AnyChart from \"./components/StockAnyChart\";\nimport { Switch, Typography, makeStyles } from \"@material-ui/core\";\nimport { FormGroup, FormControlLabel, Container } from \"@material-ui/core\";\nimport { Card, CardContent, TextField, CardHeader } from \"@material-ui/core\";\nimport { Grid, Button } from \"@material-ui/core\";\nimport HighChart from \"./components/PayoffHighChart\";\nimport HighStock from \"./components/HighStock\";\nimport ShowChartIcon from \"@material-ui/icons/ShowChart\";\nimport TocIcon from \"@material-ui/icons/Toc\";\nimport GreekTable from \"./components/GreekTable\";\nimport { useLocation } from \"react-router-dom\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport InfoMessage from \"./components/InfoMessage\";\n\nconst useStyles = makeStyles({\n  payoff: {\n    height: \"100%\",\n  },\n  btn: {\n    margin: \"2px\",\n  },\n});\n\nconst App = ({ changeTheme, theme }) => {\n  const { portfolio, stockData } = useSelector((state) => state.portfolio);\n  const info = useSelector((state) => state.strategyInfo);\n  const { volatility, interest, currentPrice } = stockData;\n  const dispatch = useDispatch();\n  const [data, setData] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [stockErrors, setStockErrors] = useState(null);\n  const [liveMode, setLiveMode] = useState(false);\n  const [optionData, setOptionData] = useState();\n  const [minX, setMinX] = useState();\n  const [maxX, setMaxX] = useState();\n  const [stockChartData, setStockChartData] = useState();\n  const [viewHighChart, setViewHighChart] = useState(true);\n  const [viewHighStock, setViewHighStock] = useState(true);\n  const [view, setView] = useState(\"payoff\");\n  const [hcData, setHcData] = useState(null);\n  const value = { liveMode, setLiveMode };\n  const [daysToExpiration, setDaysToExpiration] = useState(null);\n  const classes = useStyles();\n  const location = useLocation();\n\n  console.log(info.info);\n\n  // Set Error Message as JSX\n  const setErrs = useCallback((message) => {\n    setErrors(<Error removeFunc={() => setErrors(null)}>{message}</Error>);\n  }, []);\n\n  // Set Error Stock Message as JSX\n  const setStockErrs = useCallback((message) => {\n    setStockErrors(\n      <Error removeFunc={() => setStockErrors(null)}>{message}</Error>\n    );\n  }, []);\n\n  const saveStrategy = async () => {\n    const res = await axios.post(\n      process.env.REACT_APP_API_URL + \"/api/strategy\",\n      {\n        portfolio,\n        stockData,\n      }\n    );\n    const msg = \"Strategy saved at url: \" + process.env.REACT_APP_HOST + \"/\";\n    setErrs(msg + res.data.id);\n  };\n\n  // Update and Validate User Input Data\n  const updateData = () => {\n    // Validate Empty Portfolio\n    if (Object.keys(portfolio).length === 0)\n      return setErrs(\"Add contracts to Visualize\");\n\n    // Validate Stock Price\n    if (+stockData.currentPrice <= 0)\n      return setErrs(\"Please Enter a Valid Stock Price\");\n\n    // Validate Interest\n    if (isNaN(+stockData.interest))\n      return setErrs(\"Please Enter a Valid Interest Rate\");\n\n    const strikes = [];\n    let maxStrike = 0;\n    let minStrike = Infinity;\n\n    const values = [];\n    const theoretical = [];\n\n    // Add the min/max x values input by the user and update the max/minStrikes\n    if (maxX) {\n      if (+maxX > maxStrike) maxStrike = +maxX;\n      if (+maxX < minStrike) minStrike = +maxX;\n      strikes.push(+maxX);\n    }\n\n    if (minX) {\n      if (+minX > maxStrike) maxStrike = +minX;\n      if (+minX < minStrike) minStrike = +minX;\n      strikes.push(+minX);\n    }\n\n    // Get the Critical strikes to plot\n    for (let id in portfolio) {\n      const contract = portfolio[id];\n      const cashContract = contract.type === util.CASH;\n      const strike = cashContract ? +stockData.currentPrice : +contract.strike;\n      const date = contract.date;\n      const amount = contract.amount;\n\n      // Always Validate Amount\n      if (amount <= 0) return setErrs(\"Please Enter a Valid Amount\");\n\n      // If not a Cash Contract then validate the following fields\n      if (!cashContract) {\n        // Validate Strike prices\n        if (strike <= 0) return setErrs(\"Please Enter A Valid Strike Price\");\n\n        // Validate the Date (Check if it is defined and in the future)\n        if (!date || moment().diff(date) > 0)\n          return setErrs(\"Please Enter a Valid Date\");\n      }\n\n      // Apply To Fixed\n      strikes.push(util.round(strike));\n\n      // Update the maxStrike\n      if (strike > maxStrike) maxStrike = strike;\n      if (strike < minStrike) minStrike = strike;\n    }\n\n    const average = (maxStrike + minStrike) / 2;\n    let max = 0;\n\n    // If maxX is set\n    if (!maxX) {\n      // Auto xMax margin\n      max = Math.floor(maxStrike + average * 0.2);\n    } else {\n      max = Math.max(+maxX, maxStrike);\n    }\n\n    let min = 0;\n\n    // If minX is set\n    if (!minX) {\n      // Auto xMin Margin\n      min = Math.floor(minStrike - average * 0.2);\n    } else {\n      min = Math.min(+minX, minStrike);\n    }\n\n    const change = (max - min) / 35;\n\n    // Add domain limits\n    strikes.push(min);\n    strikes.push(max);\n\n    setMaxX(max);\n    setMinX(min);\n\n    let i = min;\n    // Add The rest of the strikes for continuous feel\n    while (i < max) {\n      // Round to 2 decimals and convert back to number\n      strikes.push(util.round(i));\n      i += change;\n    }\n\n    // Sort the strikes so the graph can be displayed properly\n    strikes.sort((a, b) => a - b);\n\n    const result = [];\n\n    // Helper DS to fetch colors\n    const colors = new ColorPicker();\n\n    // We want our plot to have N lines (N is the number of contracts in portfolio)\n    for (let id in portfolio) {\n      const contract = portfolio[id];\n      let key =\n        contract.direction + \" \" + contract.type + \" \" + contract.strike;\n      // Adjust title if cash contract\n      if (contract.type === util.CASH) {\n        key =\n          contract.direction +\n          \" \" +\n          contract.type +\n          \"  \" +\n          stockData.currentPrice;\n      }\n\n      result.push({\n        values: [],\n        key,\n        color: colors.getColor(),\n        disabled: true,\n      });\n    }\n\n    // Keey track of min/max for Ydomain\n    let minProfit = Infinity;\n    let maxProfit = -Infinity;\n\n    // For each strike, calculate the payoff and add it to values\n    for (let strike of strikes) {\n      let profitSum = 0;\n      let theoreticalPL = 0;\n      // Keep track of the index we are at\n      let i = 0;\n      for (let id in portfolio) {\n        const contract = portfolio[id];\n\n        // Calculate profit at given Strike (at Expiration)\n        const profitAtStrike = util.round(\n          util.evaluatePayoffFunc(contract, strike, stockData)\n        );\n\n        // Calculate dateDifference in years, used in theoretical black scholes\n        const dateDiff = -moment().diff(contract.date, \"years\", true);\n\n        const blackScholesValue = util.BlackScholes(\n          contract.type,\n          +strike,\n          +contract.strike,\n          +dateDiff,\n          +stockData.interest,\n          +stockData.volatility\n        );\n\n        // If the contract is Cash\n        if (contract.type === util.CASH) {\n          // Just add the profit at Strike\n          theoreticalPL += +profitAtStrike;\n        } else {\n          // Calculate depending on Buy/Sell\n          if (contract.direction === util.BUY) {\n            // Calculate Theoretical P/L\n            theoreticalPL +=\n              (blackScholesValue - contract.price) * contract.amount;\n          } else {\n            theoreticalPL +=\n              (contract.price - blackScholesValue) * contract.amount;\n          }\n        }\n\n        // Update min and max Profits\n        if (profitAtStrike > maxProfit) maxProfit = profitAtStrike;\n\n        if (profitAtStrike < minProfit) minProfit = profitAtStrike;\n\n        // Push the point at the specified strategy\n        result[i].values.push({\n          x: util.round(strike),\n          y: util.round(profitAtStrike),\n        });\n\n        // Evaluate each contract in portfolio and add it to the y value\n        profitSum += util.round(profitAtStrike);\n        i++;\n      }\n\n      // Add the point to the data\n      values.push({ x: util.round(strike), y: util.round(profitSum) });\n      theoretical.push({ x: util.round(strike), y: util.round(theoreticalPL) });\n    }\n\n    const Ydomain = [Math.floor(minProfit * 1.2), Math.floor(maxProfit * 1.2)];\n\n    // The overall strategy plot data\n    const strategyData = {\n      values,\n      key: \"Strategy\",\n      color: \"green\",\n      disabled: false,\n    };\n\n    // The Theoretical strategy plot data\n    const strategyTheoretical = {\n      values: theoretical,\n      key: \"Today\",\n      color: \"pink\",\n      disabled: false,\n    };\n\n    result.push(strategyTheoretical);\n\n    result.push(strategyData);\n\n    // Clear the Errors\n    setErrors(null);\n\n    if (viewHighChart) {\n      const res = [];\n      // Parse data into HighChart Format\n      for (let series of result) {\n        const seriesInfo = {\n          data: [],\n          visible: !series.disabled,\n          color: series.color,\n          name: series.key,\n        };\n        res.push(seriesInfo);\n        for (let point of series.values) {\n          seriesInfo.data.push([+point.x, +point.y]);\n        }\n      }\n\n      return setHcData({\n        series: res,\n        xAxis: {\n          title: {\n            text: \"Stock Price ($)\",\n          },\n        },\n        yAxis: {\n          title: {\n            text: \"Profit ($)\",\n          },\n        },\n        chart: {\n          type: \"spline\",\n        },\n        title: {\n          text: \"\",\n        },\n      });\n    }\n\n    setData({ data: result, Ydomain });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await axios.get(\n        process.env.REACT_APP_API_URL + \"/api/strategy\" + location.pathname\n      );\n      console.log(res.data);\n      dispatch(actions.setData(res.data));\n    };\n    fetchData();\n  }, []);\n\n  // Custom hook used to Reset Portfolio only when liveMode is Toggled\n  useUpdateEffect(() => {\n    // To be run on update\n    setErrors(null);\n    dispatch(actions.resetPortfolio());\n    setData(null);\n    setOptionData(null);\n  }, [liveMode]);\n\n  // Custom hook used to Reset Porfolio only when optionData changes\n  useUpdateEffect(() => {\n    dispatch(actions.resetPortfolio());\n    setStockChartData(null); // Display Loading\n    // fetchStockData();\n  }, [optionData]);\n\n  // Updating data to display\n  useEffect(() => {\n    updateData();\n  }, [portfolio, maxX, minX, viewHighChart]);\n\n  // Fetch the option Data when Search is Clicked\n  const fetchOptionData = async (ticker) => {\n    try {\n      const { data } = await axios.get(\n        `https://finnhub.io/api/v1/stock/option-chain?symbol=${ticker}&token=` +\n          process.env.REACT_APP_API_KEY\n      );\n      setOptionData(data);\n      dispatch(actions.updateStockData(\"currentPrice\", data.lastTradePrice));\n      dispatch(actions.updateStockData(\"ticker\", data.code));\n      if (data.data.length === 0) {\n        setStockErrs(util.STOCK_NO_OPTIONS, setStockErrors);\n      } else {\n        setStockErrors(null);\n        fetchStockData(ticker);\n      }\n    } catch (err) {\n      setStockErrs(util.STOCK_ERR_FETCH, setStockErrors);\n    }\n  };\n\n  const fetchStockData = async (ticker) => {\n    var unix = Math.round(+new Date() / 1000);\n    try {\n      const { data } = await axios.get(\n        `https://finnhub.io/api/v1/stock/candle?symbol=${ticker}&resolution=D&from=1199145600&to=${unix}&token=` +\n          process.env.REACT_APP_API_KEY\n      );\n\n      const length = data.c.length;\n\n      const result = [];\n\n      // Unix milliseconds\n      for (let i = 0; i < length; i++) {\n        result.push([\n          data.t[i] * 1000,\n          data.o[i],\n          data.h[i],\n          data.l[i],\n          data.c[i],\n        ]);\n      }\n      console.log(result);\n      setStockChartData(result);\n    } catch (err) {\n      setStockErrs(err.message + stockData.ticker);\n    }\n  };\n\n  const updateDaysToExpiration = (days) => {\n    let newDate = util.addDays(new Date(), days);\n    newDate = moment(newDate).format(\"YYYY-MM-DD\");\n    dispatch(actions.updateAllContracts(\"date\", newDate));\n    setDaysToExpiration(days);\n  };\n\n  return (\n    <>\n      <liveDataContext.Provider value={value}>\n        <Navigation\n          optionData={optionData}\n          changeTheme={changeTheme}\n          theme={theme}\n        />\n        <Container>\n          <Grid container spacing={1}>\n            <Grid item md={12}>\n              {stockData.ticker !== \"Theoretical\" && <SecurityInfo />}\n            </Grid>\n            <Grid item md={12}>\n              <Grid container>\n                {liveMode && <Search searchFunc={fetchOptionData} />}\n                {stockErrors}\n              </Grid>\n            </Grid>\n            <Grid item md={12}>\n              <Panel\n                optionData={optionData}\n                portfolio={portfolio}\n                visualize={updateData}\n              />\n            </Grid>\n            <Grid item md={3}>\n              <Grid container spacing={1}>\n                <Grid item md={12}>\n                  <StockData liveMode={liveMode} />\n                </Grid>\n                <Grid item md={12}>\n                  <Card variant=\"outlined\">\n                    <CardContent>\n                      <Slider\n                        min={0}\n                        max={150}\n                        title={\"Volatility\"}\n                        value={+volatility}\n                        setValue={(val) =>\n                          dispatch(actions.updateStockData(\"volatility\", val))\n                        }\n                      />\n                      <Slider\n                        min={-20}\n                        max={150}\n                        title={\"Interest\"}\n                        value={+interest}\n                        setValue={(val) =>\n                          dispatch(actions.updateStockData(\"interest\", val))\n                        }\n                      />\n                      {!liveMode && (\n                        <Slider\n                          min={1}\n                          max={1000}\n                          title={\"Time To Expiration\"}\n                          value={daysToExpiration}\n                          setValue={(val) => updateDaysToExpiration(val)}\n                        />\n                      )}\n                      {!liveMode && (\n                        <Slider\n                          min={0}\n                          max={2000}\n                          title={\"StockPrice\"}\n                          value={currentPrice}\n                          setValue={(val) =>\n                            dispatch(\n                              actions.updateStockData(\"currentPrice\", val)\n                            )\n                          }\n                        />\n                      )}\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item md={9}>\n              {errors ? errors : null}\n              <Card variant=\"outlined\" className={classes.payoff}>\n                <CardHeader\n                  avatar={\n                    <>\n                      {view === \"payoff\" ? (\n                        <FormGroup>\n                          <FormControlLabel\n                            control={\n                              <Switch\n                                checked={!viewHighChart}\n                                onChange={() =>\n                                  setViewHighChart((prev) => !prev)\n                                }\n                                aria-label=\"graph type switch\"\n                              />\n                            }\n                            label=\"Switch Graph Type\"\n                          />\n                        </FormGroup>\n                      ) : null}\n                    </>\n                  }\n                  action={\n                    <>\n                      <Button\n                        variant=\"outlined\"\n                        startIcon={<ShowChartIcon fontSize=\"large\" />}\n                        className={classes.btn}\n                        onClick={() => setView(\"payoff\")}\n                      >\n                        Payoff\n                      </Button>\n                      <Button\n                        variant=\"outlined\"\n                        startIcon={<TocIcon fontSize=\"large\" />}\n                        className={classes.btn}\n                        onClick={() => setView(\"greeks\")}\n                      >\n                        Greeks\n                      </Button>\n                      {!liveMode && (\n                        <Button\n                          variant=\"outlined\"\n                          startIcon={<SaveIcon fontSize=\"large\" />}\n                          className={classes.btn}\n                          onClick={saveStrategy}\n                        >\n                          Save Strategy\n                        </Button>\n                      )}\n                    </>\n                  }\n                />\n                <CardContent>\n                  {view === \"greeks\" ? (\n                    <>\n                      <GreekTable />\n                    </>\n                  ) : (\n                    <>\n                      {!viewHighChart ? (\n                        <Payoff data={data} />\n                      ) : (\n                        <HighChart data={hcData} theme={theme} />\n                      )}\n                      <Grid container>\n                        <Grid item md={2}>\n                          <TextField\n                            id=\"outlined-number\"\n                            label=\"Low\"\n                            placeholder=\"Auto\"\n                            type=\"number\"\n                            InputLabelProps={{\n                              shrink: true,\n                            }}\n                            onBlur={(e) => setMinX(e.target.value)}\n                            variant=\"outlined\"\n                          />\n                        </Grid>\n                        <Grid item md={8}></Grid>\n                        <Grid item md={2}>\n                          <TextField\n                            id=\"outlined-number\"\n                            label=\"High\"\n                            placeholder=\"Auto\"\n                            type=\"number\"\n                            InputLabelProps={{\n                              shrink: true,\n                            }}\n                            onBlur={(e) => setMaxX(e.target.value)}\n                            variant=\"outlined\"\n                          />\n                        </Grid>\n                      </Grid>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid item md={12}>\n              <Card variant=\"outlined\">\n                <CardContent>\n                  <FormGroup>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={!viewHighStock}\n                          onChange={() => setViewHighStock((prev) => !prev)}\n                          aria-label=\"live mode switch\"\n                        />\n                      }\n                      label={\"Switch Chart Type\"}\n                    />\n                  </FormGroup>\n                  {stockChartData && optionData ? (\n                    <>\n                      {viewHighStock ? (\n                        <HighStock\n                          mockData={stockChartData}\n                          ticker={stockData.ticker}\n                        />\n                      ) : (\n                        <AnyChart\n                          data={stockChartData}\n                          ticker={stockData.ticker}\n                        />\n                      )}\n                    </>\n                  ) : (\n                    <>\n                      {optionData && liveMode ? (\n                        <Typography variant=\"h1\">Loading...</Typography>\n                      ) : (\n                        <>\n                          {!liveMode && (\n                            <>\n                              <Typography variant=\"h3\">\n                                Switch to live mode to view stock chart\n                              </Typography>\n                            </>\n                          )}\n                        </>\n                      )}\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n          <InfoMessage />\n        </Container>\n      </liveDataContext.Provider>\n    </>\n  );\n};\n\nexport default App;\n","import * as cts from \"../actions/portfolio\";\nimport {\n  initialPortfolio,\n  updatePortfolioPrices,\n} from \"../../utility/constants\";\nimport { stockDataInitialState } from \"../../utility/constants\";\n\nexport const initialState = {\n  portfolio: { ...initialPortfolio },\n  stockData: { ...stockDataInitialState },\n};\n\nconst resetPortfolio = (state, action) => {\n  return { portfolio: {}, stockData: { ...state.stockData } };\n};\n\nconst removeContract = (state, action) => {\n  const newPortfolio = { ...state.portfolio };\n  delete newPortfolio[action.contractId];\n  return { portfolio: newPortfolio, stockData: { ...state.stockData } };\n};\n\nconst addContract = (state, action) => {\n  const { contractName } = action.newContract;\n  const newPortfolio = { ...state.portfolio };\n  newPortfolio[contractName] = action.newContract;\n  updatePortfolioPrices(newPortfolio, state.stockData);\n  return { portfolio: newPortfolio, stockData: { ...state.stockData } };\n};\n\nconst updateContract = (state, action) => {\n  const newPortfolio = { ...state.portfolio };\n  newPortfolio[action.contractName][action.property] = action.value;\n  updatePortfolioPrices(newPortfolio, state.stockData);\n  return { portfolio: newPortfolio, stockData: { ...state.stockData } };\n};\n\nconst setPortfolio = (state, action) => {\n  updatePortfolioPrices(action.newPortfolio, state.stockData);\n  return { portfolio: action.newPortfolio, stockData: { ...state.stockData } };\n};\n\nconst updatePrices = (state, action) => {\n  const newPortfolio = { ...state.portfolio };\n  updatePortfolioPrices(newPortfolio, state.stockData);\n  return { portfolio: newPortfolio, stockData: { ...state.stockData } };\n};\n\nconst updateStockData = (state, action) => {\n  const newStockData = { ...state.stockData };\n  newStockData[action.property] = action.value;\n  const newPortfolio = { ...state.portfolio };\n  updatePortfolioPrices(newPortfolio, newStockData);\n  return {\n    portfolio: newPortfolio,\n    stockData: newStockData,\n  };\n};\n\nconst updateAllContracts = (state, action) => {\n  const newPortfolio = { ...state.portfolio };\n  for (let key in newPortfolio) {\n    const contract = newPortfolio[key];\n    contract[action.property] = action.value;\n  }\n  updatePortfolioPrices(state.portfolio, state.stockData);\n  return { portfolio: newPortfolio, stockData: { ...state.stockData } };\n};\n\nconst setData = (state, action) => {\n  const { portfolio, stockData } = action.data;\n  updatePortfolioPrices(portfolio, stockData);\n  return { portfolio: portfolio, stockData: stockData };\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    // Portfolio\n    case cts.ADD_CONTRACT:\n      return addContract(state, action);\n    case cts.RESET_PORTFOLIO:\n      return resetPortfolio(state, action);\n    case cts.SET_PORTFOLIO:\n      return setPortfolio(state, action);\n    case cts.REMOVE_CONTRACT:\n      return removeContract(state, action);\n    case cts.UPDATE_CONTRACT:\n      return updateContract(state, action);\n    case cts.UPDATE_PRICES:\n      return updatePrices(state, action);\n    case cts.UPDATE_ALL_CONTRACTS:\n      return updateAllContracts(state, action);\n\n    // Stock Data\n    case cts.UPDATE_STOCK_DATA:\n      return updateStockData(state, action);\n    case cts.RESET_DATA:\n      return { ...state, stockData: { ...stockDataInitialState } };\n\n    case cts.SET_DATA:\n      return setData(state, action);\n    default:\n      // Will be run initially\n      return state;\n  }\n};\n","import { SET_INFO } from \"../actions/strategy-info\";\n\nconst initialState = {\n  info: \"\",\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_INFO:\n      return { info: action.info };\n    default:\n      return initialState;\n  }\n};\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport portfolioReducer from \"./store/reducers/portfolio\";\nimport strategyReducer from \"./store/reducers/strategy-info\";\nimport { createStore, combineReducers } from \"redux\";\nimport { ThemeProvider, createMuiTheme, Paper } from \"@material-ui/core\";\nimport { HashRouter } from \"react-router-dom\";\n\nconst rootReducer = combineReducers({\n  portfolio: portfolioReducer,\n  strategyInfo: strategyReducer,\n});\n\nconst store = createStore(rootReducer);\n\nconst Index = () => {\n  const [darkState, setDarkState] = useState(false);\n  const palletType = darkState ? \"dark\" : \"light\";\n\n  const theme = createMuiTheme({\n    palette: {\n      type: palletType,\n    },\n  });\n\n  const handleThemeChange = () => {\n    setDarkState(!darkState);\n  };\n\n  return (\n    <React.StrictMode>\n      <HashRouter>\n        <Provider store={store}>\n          <ThemeProvider theme={theme}>\n            <Paper>\n              <App changeTheme={handleThemeChange} theme={palletType} />\n            </Paper>\n          </ThemeProvider>\n        </Provider>\n      </HashRouter>\n    </React.StrictMode>\n  );\n};\n\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n"],"sourceRoot":""}